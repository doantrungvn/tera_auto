<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.terasoluna.qp.domain.repository.businessdesigncomponent.DecisionComponentRepository">

    <resultMap id="decisionComponentResultMap" type="DecisionComponent">
        <id property="decisionComponentId" column="decision_component_id" />
        <result property="label" column="label" />
        <result property="decisionTableId" column="decision_table_id" />
        <result property="decisionTableIdAutocomplete" column="decision_table_name" />
        <result property="decisionTableCode" column="decision_table_code" />
        <result property="decisionTableIdRefer" column="decision_table_id_refer" />
        <result property="decisionTableCodeRefer" column="decision_table_code_refer" />
        <result property="decisionTableNameRefer" column="decision_table_name_refer" />
        <result property="remark" column="remark" />
        <result property="sequenceLogicId" column="sequence_logic_id" />
        <result property="moduleId" column="module_id" />
        <result property="moduleIdAutocomplete" column="module_name" />
        <result property="businessLogicId" column="business_logic_id" />
    </resultMap>
    <resultMap id="autocompleteResultMap" type="Autocomplete">
		<result property="optionValue" column="optionValue" />
		<result property="optionLabel" column="optionLabel" />
	</resultMap>
	<resultMap id="decisionInputValueResultMap" type="DecisionInputValue">
        <id property="decisionInputValueId" column="decision_input_value_id" />
        <result property="decisionComponentId" column="decision_component_id" />
        <result property="decisionInputBeanId" column="decision_input_bean_id" />
        <result property="decisionInputBeanCode" column="decision_input_bean_code" />
        <result property="decisionInputBeanName" column="decision_input_bean_name" />
        <result property="dataType" column="data_type" />
        <result property="parameterScope" column="parameter_scope" />
        <result property="parameterId" column="parameter_id" />
        <result property="decisionInputBeanIdRefer" column="decision_input_bean_id_refer" />
        <result property="decisionInputBeanCodeRefer" column="decision_input_bean_code_refer" />
        <result property="decisionInputBeanNameRefer" column="decision_input_bean_name_refer" />
        <result property="dataTypeRefer" column="data_type_refer" />
        <result property="decisionTableIdRefer" column="decision_table_id_refer" />
    </resultMap>
    <resultMap id="decisionOutputValueResultMap" type="DecisionOutputValue">
        <id property="decisionOutputValueId" column="decision_output_value_id" />
        <result property="decisionComponentId" column="decision_component_id" />
        <result property="decisionOutputBeanId" column="decision_output_bean_id" />
        <result property="decisionOutputBeanCode" column="decision_output_bean_code" />
        <result property="decisionOutputBeanName" column="decision_output_bean_name" />
        <result property="dataType" column="data_type" />
        <result property="targetScope" column="target_scope" />
        <result property="targetId" column="target_id" />
        <result property="decisionOutputBeanIdRefer" column="decision_output_bean_id_refer" />
        <result property="decisionOutputBeanCodeRefer" column="decision_output_bean_code_refer" />
        <result property="decisionOutputBeanNameRefer" column="decision_output_bean_name_refer" />
        <result property="dataTypeRefer" column="data_type_refer" />
        <result property="decisionTableIdRefer" column="decision_table_id_refer" />
    </resultMap>
    <resultMap id="sequenceLogicResultMap" type="SequenceLogic">
        <id property="sequenceLogicId" column="sequence_logic_id" />
        <result property="sequenceLogicName" column="sequence_logic_name" />
        <result property="componentType" column="component_type" />
        <result property="componentId" column="component_id" />
        <result property="sequenceNo" column="sequence_no" />
        <result property="xCoordinates" column="x_coordinates" />
        <result property="yCoordinates" column="y_coordinates" />
        <result property="remark" column="remark" />
        <result property="businessLogicId" column="business_logic_id" />
        <result property="parentSequenceLogicId" column="parent_sequence_logic_id" />
        <result property="groupFlg" column="group_flg" />
        <result property="relatedSequenceLogicId" column="related_sequence_logic_id" />
    </resultMap>
    <resultMap id="businessDesignResultMap" type="BusinessDesign">
        <id property="businessLogicId" column="business_logic_id" />
        <result property="businessLogicCode" column="business_logic_code" />
        <result property="businessLogicName" column="business_logic_name" />
        <result property="returnType" column="return_type" />
        <result property="screenId" column="screen_id" />
        <result property="moduleId" column="module_id" />
        <result property="projectId" column="project_id" />
        <result property="customizeFlg" column="customize_flg" />
        <result property="uploadFileId" column="upload_file_id" />
        <result property="createdBy" column="created_by" />
        <result property="createdDate" column="created_date" />
        <result property="updatedBy" column="updated_by" />
        <result property="updatedDate" column="updated_date" />
        <result property="designStatus" column="design_status" />
        <result property="packageName" column="package_name" />
        <result property="patternType" column="pattern_type" />
        <result property="confirmFlg" column="confirm_flg" />
        <result property="completeFlg" column="complete_flg" />
        <result property="remark" column="remark" />
        <result property="screenFormId" column="screen_form_id" />
        <result property="functionId" column="function_id" />
        <result property="batchType" column="batch_type" />
    </resultMap>
    <!-- decision component -->
	<!--  Auto complete functions -->
    <select id="getAutocompleteDecisionForDecisionCom" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput" resultMap="autocompleteResultMap">
    	SELECT 
    		a.decision_table_id AS optionValue,
       		a.decision_table_code AS output01,
       		a.decision_table_name AS optionLabel
		FROM decision_table a
		WHERE 
			a.project_id= CAST(#{arg01} AS NUMERIC)
			
  			<if test="searchKey != null and searchKey != ''">
                <bind name="searchKey" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(searchKey)" />
                <![CDATA[ AND a.decision_table_name iLIKE #{searchKey} ESCAPE '~' ]]>
           </if>
           <if test="arg03 != null and arg03 != ''">
           and 
           	(
	        	a.module_id is null or a.module_id = CAST(#{arg03} AS NUMERIC)
			)
			</if>
			 <if test="arg03 == null or arg03 == ''">
           and 
           	(
	           	a.module_id is null
			)
			</if>
		ORDER BY a.decision_table_id DESC
		<if test="arg02 != null and arg02 != ''">
			LIMIT CAST(#{arg02} AS NUMERIC)
		</if>
		<if test="arg02 == null || arg02 == ''">
			LIMIT 20
		</if>
		
    </select>
    
    <select id="getSequencesDecisionComponent" resultType="Long">
    	select SETVAL('decision_component_seq'::regclass, NEXTVAL('decision_component_seq'::regclass) + #{size})
    </select>
    <select id="getSequencesDecisionInputValue" resultType="Long">
    	select SETVAL('decision_input_value_seq'::regclass, NEXTVAL('decision_input_value_seq'::regclass) + #{size})
    </select>
    <select id="getSequencesDecisionOutputValue" resultType="Long">
    	select SETVAL('decision_output_value_seq'::regclass, NEXTVAL('decision_output_value_seq'::regclass) + #{size})
    </select>
    
    <insert id="registerDecisionComponent" >
    	<foreach item="item" collection="decisionComponentItems" separator=";">
    		INSERT INTO decision_component
			(
            	decision_component_id, 
            	label, 
            	decision_table_id,
            	decision_table_code,
            	decision_table_name, 
            	remark, 
            	sequence_logic_id
            )
    		VALUES
    		(
				#{item.decisionComponentId},
				#{item.label}, 
				#{item.decisionTableId},
				#{item.decisionTableCode},
				#{item.decisionTableIdAutocomplete},
				#{item.remark},
            	#{item.sequenceLogicId}
            );
            <if test="item.parameterInputBeans != null and  item.parameterInputBeans.size() > 0 ">
            	<foreach item="itemInput" collection="item.parameterInputBeans" separator=";">
	            	INSERT INTO decision_input_value
					(
						decision_input_value_id,
		            	decision_component_id, 
		            	decision_input_bean_id, 
		            	decision_input_bean_code, 
		            	decision_input_bean_name, 
		            	data_type, 
		            	parameter_scope, 
		            	parameter_id
		            )
		    		VALUES
					(
						#{itemInput.decisionInputValueId},
						#{item.decisionComponentId},
						#{itemInput.decisionInputBeanId}, 
						#{itemInput.decisionInputBeanCode}, 
						#{itemInput.decisionInputBeanName},
		            	#{itemInput.dataType},
		            	#{itemInput.parameterScope},
		            	CAST(#{itemInput.parameterId} AS numeric(16,0))
		            );
		            <if test="itemInput.lstParameterIndex != null and  itemInput.lstParameterIndex.size() > 0 ">
		            	INSERT INTO bd_parameter_index
		            	(
		            		table_type, 
		            		table_id, 
		            		parameter_id, 
		            		parameter_index_type, 
		            		parameter_index_id,
		            		business_logic_id
		            	)
		    			VALUES
		    			<foreach item="itemIndex" collection="itemInput.lstParameterIndex" separator=",">
			    			(
			    				#{itemIndex.tableType}, 
			    				#{itemInput.decisionInputValueId},
			    				CAST(#{itemIndex.parameterId} AS numeric(16,0)),
			    				#{itemIndex.parameterIndexType}, 
			            		CAST(#{itemIndex.parameterIndexId} AS numeric(16,0)),
			            		#{itemIndex.businessLogicId}
			            	)
		    			</foreach>;
		    		</if>
	            </foreach>;
            </if>
            <if test="item.parameterOutputBeans != null and  item.parameterOutputBeans.size() > 0 ">
	    		<foreach item="itemOutput" collection="item.parameterOutputBeans" separator=";">
					INSERT INTO decision_output_value
					(
						decision_output_value_id,
		            	decision_component_id, 
		            	decision_output_bean_id, 
		            	decision_output_bean_code, 
		            	decision_output_bean_name, 
		            	data_type, 
		            	target_scope, 
		            	target_id
		            )
		    		VALUES 
					(
						#{itemOutput.decisionOutputValueId},
						#{item.decisionComponentId},
						#{itemOutput.decisionOutputBeanId}, 
						#{itemOutput.decisionOutputBeanCode}, 
						#{itemOutput.decisionOutputBeanName},
		            	#{itemOutput.dataType},
		            	#{itemOutput.targetScope},
		            	CAST(#{itemOutput.targetId} AS numeric(16,0))
		            );
		            <if test="itemOutput.lstTargetIndex != null and  itemOutput.lstTargetIndex.size() > 0 ">
		            	INSERT INTO bd_parameter_index
		            	(
		            		table_type, 
		            		table_id, 
		            		parameter_id, 
		            		parameter_index_type, 
		            		parameter_index_id,
		            		business_logic_id
		            	)
		    			VALUES
		    			<foreach item="itemIndex" collection="itemOutput.lstTargetIndex" separator=",">
			    			(
			    				#{itemIndex.tableType}, 
			    				#{itemOutput.decisionOutputValueId},
			    				CAST(#{itemIndex.parameterId} AS numeric(16,0)),
			    				#{itemIndex.parameterIndexType}, 
			            		CAST(#{itemIndex.parameterIndexId} AS numeric(16,0)),
			            		#{itemIndex.businessLogicId}
			            	)
		    			</foreach>;
		    		</if>
				</foreach>;
			</if>
    	</foreach>
    </insert>
    <select id="findDecisionComponentByBusinessLogic" resultMap="decisionComponentResultMap">
		SELECT 
			a.decision_component_id, 
			a.label, 
			a.decision_table_id, 
			a.decision_table_name, 
			a.decision_table_code, 
			a.remark, 
			a.sequence_logic_id,
			b.decision_table_id as decision_table_id_refer,
			b.decision_table_id as decision_table_code_refer,
			b.decision_table_id as decision_table_name_refer,
			c.module_id,
			c.module_name
  		FROM decision_component a
  		LEFT JOIN decision_table b
  			on b.decision_table_id = a.decision_table_id
  		LEFT JOIN module c
  			on c.module_id = b.module_id
		WHERE EXISTS
    		( 
    		SELECT b.sequence_logic_id
     		FROM sequence_logic b
     		WHERE b.business_logic_id = #{businessLogicId}
       			AND component_type = 5
       			AND b.sequence_logic_id = a.sequence_logic_id
       		)
    </select>
    
    <select id="findDecisionInputValueByBusinessLogic" resultMap="decisionInputValueResultMap">
		SELECT	A.*,
				A1.*
		FROM 
		(	
			SELECT 
				a.decision_input_value_id, 
				a.decision_component_id, 
				a.decision_input_bean_id, 
				a.decision_input_bean_code, 
				a.decision_input_bean_name, 
				a.data_type, 
				a.parameter_scope, 
				a.parameter_id,
				b.decision_table_id
	  		FROM decision_input_value a
			lEFT JOIN decision_component b
				on (b.decision_component_id = a.decision_component_id )
			WHERE EXISTS
			    (
					SELECT c.sequence_logic_id
					FROM sequence_logic c
					WHERE c.business_logic_id = #{businessLogicId}
						AND component_type = 5
						AND c.sequence_logic_id = b.sequence_logic_id
				)
			ORDER BY a.decision_input_value_id
		) as A
		FULL OUTER JOIN 
		(
			SELECT 
				a.decision_input_bean_id as decision_input_bean_id_refer,
				a.decision_input_bean_code as decision_input_bean_code_refer,
				a.decision_input_bean_name as decision_input_bean_name_refer,
				a.data_type as data_type_refer,
				a.decision_table_id as decision_table_id_refer
			FROM decision_input_bean a
			WHERE EXISTS
			    (
			    	SELECT b.decision_table_id
					FROM decision_component b
					LEFT JOIN sequence_logic c
						on (b.sequence_logic_id = c.sequence_logic_id)
					WHERE c.business_logic_id = #{businessLogicId}
						AND c.component_type = 5
						AND b.decision_table_id = a.decision_table_id
				)
			ORDER BY a.item_sequence_no
		) A1 
		on (A1.decision_input_bean_id_refer = A.decision_input_bean_id)
    </select>
    
    <select id="findDecisionOutputValueByBusinessLogic" resultMap="decisionOutputValueResultMap">
		SELECT	A.*,
				A1.*
		FROM 
		(	
			SELECT 
				a.decision_output_value_id, 
				a.decision_component_id, 
				a.decision_output_bean_id, 
				a.decision_output_bean_code, 
				a.decision_output_bean_name, 
				a.data_type, 
				a.target_scope, 
				a.target_id,
				b.decision_table_id
	  		FROM decision_output_value a
			lEFT JOIN decision_component b
				on (b.decision_component_id = a.decision_component_id )
			WHERE EXISTS
			    (
			    	SELECT c.sequence_logic_id
				    FROM sequence_logic c
				    WHERE c.business_logic_id = #{businessLogicId}
				       AND component_type = 5
				       AND c.sequence_logic_id = b.sequence_logic_id
			    )
			ORDER BY a.decision_output_value_id
		) as A
		FULL OUTER JOIN 
		(
			SELECT 
				a.decision_output_bean_id as decision_output_bean_id_refer,
				a.decision_output_bean_code as decision_output_bean_code_refer,
				a.decision_output_bean_name as decision_output_bean_name_refer,
				a.data_type as data_type_refer,
				a.decision_table_id as decision_table_id_refer
			FROM decision_output_bean a
			WHERE EXISTS
			    (
			    	SELECT b.decision_table_id
					FROM decision_component b
				    LEFT JOIN sequence_logic c
						on (b.sequence_logic_id = c.sequence_logic_id)
				    WHERE c.business_logic_id = #{businessLogicId}
						AND c.component_type = 5
						AND b.decision_table_id = a.decision_table_id
				)
			ORDER BY a.item_sequence_no
		) A1 
		on (A1.decision_output_bean_id_refer = A.decision_output_bean_id)
    </select>
    
    <!-- Adding HungHX -->
    <select id="findAllDecisionComponentByModuleId" resultMap="decisionComponentResultMap">
		SELECT 
			a.decision_component_id, 
			a.label, 
			a.decision_table_id, 
			a.decision_table_name, 
			a.decision_table_code, 
			a.remark, 
			a.sequence_logic_id,
			b.decision_table_id as decision_table_id_refer,
			b.decision_table_code as decision_table_code_refer,
			b.decision_table_name as decision_table_name_refer,
			c.module_id,
			c.module_name
  		FROM decision_component a
  		LEFT JOIN decision_table b
  			on b.decision_table_id = a.decision_table_id
  		LEFT JOIN module c
  			on c.module_id = b.module_id
		WHERE EXISTS
    		( 
    		SELECT d.sequence_logic_id
     		FROM sequence_logic d
     		INNER JOIN business_logic e ON d.business_logic_id = e.business_logic_id
     		WHERE e.module_id = #{moduleId}
       			AND component_type = 5
       			AND d.sequence_logic_id = a.sequence_logic_id
       		)
    </select>
    
    <select id="findAllDecisionInputValueByModuleId" resultMap="decisionInputValueResultMap">
		SELECT 
			a.decision_input_value_id, 
			a.decision_component_id, 
			a.decision_input_bean_id, 
			a.decision_input_bean_code, 
			a.decision_input_bean_name, 
			a.data_type, 
			a.parameter_scope, 
			a.parameter_id,
			b.decision_table_id
		FROM decision_input_value a
		lEFT JOIN decision_component b
			on (b.decision_component_id = a.decision_component_id )
		WHERE EXISTS
		    (
				SELECT c.sequence_logic_id
				FROM sequence_logic c
				INNER JOIN business_logic blogic ON c.business_logic_id = blogic.business_logic_id
				WHERE blogic.module_id = #{moduleId}
					AND component_type = 5
					AND c.sequence_logic_id = b.sequence_logic_id
			)
		ORDER BY a.decision_input_value_id
    </select>
    
    <select id="findAllDecisionOutputValueByModuleId" resultMap="decisionOutputValueResultMap">
    	SELECT 
				a.decision_output_value_id, 
				a.decision_component_id, 
				a.decision_output_bean_id, 
				a.decision_output_bean_code, 
				a.decision_output_bean_name, 
				a.data_type, 
				a.target_scope, 
				a.target_id,
				b.decision_table_id
	  		FROM decision_output_value a
			lEFT JOIN decision_component b
				on (b.decision_component_id = a.decision_component_id )
			WHERE EXISTS
			    (
			    	SELECT c.sequence_logic_id
				    FROM sequence_logic c
				    INNER JOIN business_logic blogic ON c.business_logic_id = blogic.business_logic_id
					WHERE blogic.module_id = #{moduleId}
				       AND component_type = 5
				       AND c.sequence_logic_id = b.sequence_logic_id
			    )
			ORDER BY a.decision_output_value_id
    </select>
    
    <!-- generate source code of commmon blogic -->
    <select id="findAllDecisionComponentByModuleCommon" resultMap="decisionComponentResultMap">
        SELECT 
            a.decision_component_id, 
            a.label, 
            a.decision_table_id, 
            a.decision_table_name, 
            a.decision_table_code, 
            a.remark, 
            a.sequence_logic_id,
            b.decision_table_id as decision_table_id_refer,
            b.decision_table_code as decision_table_code_refer,
            b.decision_table_name as decision_table_name_refer
        FROM decision_component a
        LEFT JOIN decision_table b
            on b.decision_table_id = a.decision_table_id
        WHERE EXISTS
            ( 
            SELECT d.sequence_logic_id
            FROM sequence_logic d
            INNER JOIN business_logic e ON d.business_logic_id = e.business_logic_id
            WHERE e.project_id = #{projectId} AND e.module_id is null and e.blogic_type = 1   
                AND component_type = 5
                AND d.sequence_logic_id = a.sequence_logic_id
            )
    </select>
    
    <select id="findAllDecisionInputValueByModuleCommon" resultMap="decisionInputValueResultMap">
        SELECT 
            a.decision_input_value_id, 
            a.decision_component_id, 
            a.decision_input_bean_id, 
            a.decision_input_bean_code, 
            a.decision_input_bean_name, 
            a.data_type, 
            a.parameter_scope, 
            a.parameter_id,
            b.decision_table_id
        FROM decision_input_value a
        lEFT JOIN decision_component b
            on (b.decision_component_id = a.decision_component_id )
        WHERE EXISTS
            (
                SELECT c.sequence_logic_id
                FROM sequence_logic c
                INNER JOIN business_logic blogic ON c.business_logic_id = blogic.business_logic_id
                WHERE blogic.project_id = #{projectId} AND blogic.module_id is null and blogic.blogic_type = 1   
                    AND component_type = 5
                    AND c.sequence_logic_id = b.sequence_logic_id
            )
        ORDER BY a.decision_input_value_id
    </select>
    
    <select id="findAllDecisionOutputValueByModuleCommon" resultMap="decisionOutputValueResultMap">
        SELECT 
                a.decision_output_value_id, 
                a.decision_component_id, 
                a.decision_output_bean_id, 
                a.decision_output_bean_code, 
                a.decision_output_bean_name, 
                a.data_type, 
                a.target_scope, 
                a.target_id,
                b.decision_table_id
            FROM decision_output_value a
            lEFT JOIN decision_component b
                on (b.decision_component_id = a.decision_component_id )
            WHERE EXISTS
                (
                    SELECT c.sequence_logic_id
                    FROM sequence_logic c
                    INNER JOIN business_logic blogic ON c.business_logic_id = blogic.business_logic_id
                    WHERE blogic.project_id = #{projectId} AND blogic.module_id is null and blogic.blogic_type = 1   
                       AND component_type = 5
                       AND c.sequence_logic_id = b.sequence_logic_id
                )
            ORDER BY a.decision_output_value_id
    </select>
    
    <update id="modifyDecisionComponent">
    	UPDATE decision_component
		SET decision_table_code=#{decisionTable.decisionTbCode},
			decision_table_name=#{decisionTable.decisionTbName}
		WHERE decision_table_id = #{decisionTable.decisionTbId};
    </update>
    
    <select id="findDecisionComponentByDecisionTbId" resultMap="decisionComponentResultMap">
		SELECT 
			a.decision_component_id, 
			a.label, 
			a.decision_table_id, 
			a.decision_table_name, 
			a.decision_table_code, 
			a.remark, 
			a.sequence_logic_id,
			b.business_logic_id
  		FROM decision_component a
  		LEFT JOIN sequence_logic b on (b.sequence_logic_id = a.sequence_logic_id)
		WHERE a.decision_table_id = #{decisionTbId}
    </select>
    
    <select id="findDecisionInputValueByDecisionTbId" resultMap="decisionInputValueResultMap">
		SELECT 
			a.decision_input_value_id, 
			a.decision_component_id, 
			a.decision_input_bean_id, 
       		a.decision_input_bean_code, 
       		a.decision_input_bean_name, 
       		a.data_type, 
       		a.parameter_scope, 
       		a.parameter_id
 	 	FROM decision_input_value a
 	 	LEFT JOIN decision_component b on (a.decision_component_id= b.decision_component_id)
 	 	WHERE b.decision_table_id = #{decisionTbId}
    </select>
    
    <select id="findDecisionOutputValueByDecisionTbId" resultMap="decisionOutputValueResultMap">
		SELECT 
			a.decision_output_value_id, 
			a.decision_component_id, 
			a.decision_output_bean_id, 
       		a.decision_output_bean_code, 
       		a.decision_output_bean_name, 
       		a.data_type, 
       		a.target_scope, 
       		a.target_id
  		FROM decision_output_value a
  		LEFT JOIN decision_component b on (a.decision_component_id= b.decision_component_id)
 	 	WHERE b.decision_table_id = #{decisionTbId}
    </select>
    
    <delete id="deleteDecisionInputValueByDecisionComponent">
		DELETE FROM decision_input_value
		WHERE
		<if test="lstComponents != null and lstComponents.size > 0">
			decision_component_id IN
			<foreach collection="lstComponents" item="item" open="(" close=")" separator=",">
				Cast(#{item.decisionComponentId} as numeric)
			</foreach>
		</if>
		<if test="lstComponents == null or lstComponents.size == 0">
			FALSE
		</if>
    </delete>
    
    <delete id="deleteDecisionOutputValueByDecisionComponent">
		DELETE FROM decision_output_value
		WHERE
		<if test="lstComponents != null and lstComponents.size > 0">
			decision_component_id IN
			<foreach collection="lstComponents" item="item" open="(" close=")" separator=",">
				Cast(#{item.decisionComponentId} as numeric)
			</foreach>
		</if>
		<if test="lstComponents == null or lstComponents.size == 0">
			FALSE
		</if>
    </delete>
    
    <delete id="deleteDecisionInputValueByDecisionTblId">
		DELETE FROM decision_input_value
		WHERE decision_input_value_id in
		(
			SELECT a.decision_input_value_id
			FROM decision_input_value a
			LEFT JOIN decision_component b on ( a.decision_component_id = b.decision_component_id)
			LEFT JOIN decision_input_bean c on ( c.decision_input_bean_id = a.decision_input_bean_id)
			WHERE b.decision_table_id = #{decisionTableId}
			and c.decision_input_bean_id is null
		)
    </delete>
    
    <delete id="deleteDecisionOutputValueByDecisionTblId">
		DELETE FROM decision_output_value
		WHERE decision_output_value_id in
		(
			SELECT a.decision_output_value_id
			FROM decision_output_value a
			LEFT JOIN decision_component b on ( a.decision_component_id = b.decision_component_id)
			LEFT JOIN decision_output_bean c on ( c.decision_output_bean_id = a.decision_output_bean_id)
			WHERE b.decision_table_id = #{decisionTableId}
			and c.decision_output_bean_id is null
		)
    </delete>
</mapper>
