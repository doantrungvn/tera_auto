<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.terasoluna.qp.domain.repository.businessdesigncomponent.LoopComponentRepository">

    <resultMap id="loopComponentResultMap" type="LoopComponent">
        <id property="loopComponentId" column="loop_component_id" />
        <result property="label" column="label" />
        <result property="loopType" column="loop_type" />
        <result property="parameterScope" column="parameter_scope" />
        <result property="parameterId" column="parameter_id" />
        <result property="fromScope" column="from_scope" />
        <result property="fromValue" column="from_value" />
        <result property="toScope" column="to_scope" />
        <result property="toValue" column="to_value" />
        <result property="formulaDefinitionId" column="formula_definition_id" />
        <result property="formulaDefinitionContent" column="formula_definition_content" />
        <result property="remark" column="remark" />
        <result property="sequenceLogicId" column="sequence_logic_id" />
        <result property="index" column="index" />
        <result property="loopStepType" column="loop_step_type" />
        <result property="loopStepValue" column="loop_step_value" />
    </resultMap>
    <resultMap id="businessDesignResultMap" type="BusinessDesign">
        <id property="businessLogicId" column="business_logic_id" />
        <result property="businessLogicCode" column="business_logic_code" />
        <result property="businessLogicName" column="business_logic_name" />
        <result property="returnType" column="return_type" />
        <result property="screenId" column="screen_id" />
        <result property="moduleId" column="module_id" />
        <result property="projectId" column="project_id" />
        <result property="customizeFlg" column="customize_flg" />
        <result property="uploadFileId" column="upload_file_id" />
        <result property="createdBy" column="created_by" />
        <result property="createdDate" column="created_date" />
        <result property="updatedBy" column="updated_by" />
        <result property="updatedDate" column="updated_date" />
        <result property="designStatus" column="design_status" />
        <result property="packageName" column="package_name" />
        <result property="patternType" column="pattern_type" />
        <result property="confirmFlg" column="confirm_flg" />
        <result property="completeFlg" column="complete_flg" />
        <result property="remark" column="remark" />
        <result property="screenFormId" column="screen_form_id" />
        <result property="functionId" column="function_id" />
        <result property="batchType" column="batch_type" />
    </resultMap>
    <resultMap id="sequenceLogicResultMap" type="SequenceLogic">
        <id property="sequenceLogicId" column="sequence_logic_id" />
        <result property="sequenceLogicName" column="sequence_logic_name" />
        <result property="componentType" column="component_type" />
        <result property="componentId" column="component_id" />
        <result property="sequenceNo" column="sequence_no" />
        <result property="xCoordinates" column="x_coordinates" />
        <result property="yCoordinates" column="y_coordinates" />
        <result property="remark" column="remark" />
        <result property="businessLogicId" column="business_logic_id" />
        <result property="parentSequenceLogicId" column="parent_sequence_logic_id" />
        <result property="groupFlg" column="group_flg" />
        <result property="relatedSequenceLogicId" column="related_sequence_logic_id" />
    </resultMap>
    
    <!-- loop component -->
    <select id="getSequencesLoopComponent" resultType="Long">
    	select SETVAL('loop_component_seq'::regclass, NEXTVAL('loop_component_seq'::regclass) + #{size})
    </select>
    
    <insert id="registerLoopComponent" >
    	<if test="loopComponentItems != null and  loopComponentItems.size() > 0 ">
	  		<foreach item="item" collection="loopComponentItems">
				INSERT INTO 
					loop_component
				(
					loop_component_id,
	            	label, 
	            	loop_type, 
	            	parameter_scope, 
	            	parameter_id, 
	            	from_scope, 
	            	from_value, 
	            	to_scope, 
	            	to_value, 
	            	formula_definition_id, 
	            	formula_definition_content, 
	            	sequence_logic_id, 
	            	remark,
	            	index,
	            	loop_step_type,
	            	loop_step_value
	            )
	    		VALUES 
				(
					#{item.loopComponentId},
					#{item.label}, 
					#{item.loopType}, 
					#{item.parameterScope},
	            	cast(#{item.parameterId} as numeric),
	            	#{item.fromScope}, 
					#{item.fromValue}, 
					#{item.toScope},
	            	#{item.toValue},
					#{item.formulaDefinitionId}, 
					#{item.formulaDefinitionContent},
	            	#{item.sequenceLogicId},
	            	#{item.remark},
	            	#{item.index},
	            	#{item.loopStepType},
	            	#{item.loopStepValue}
	            );
	             <if test="item.lstFromIndex != null and  item.lstFromIndex.size() > 0 ">
	                    INSERT INTO bd_parameter_index
	                    (
	                        table_type, 
	                        table_id, 
	                        parameter_id, 
	                        parameter_index_type, 
	                        parameter_index_id,
	                        business_logic_id
	                    )
	                    VALUES
	                    <foreach item="itemFrom" collection="item.lstFromIndex" separator=",">
	                        (
	                            #{itemFrom.tableType}, 
	                            #{item.loopComponentId},
	                            CAST(#{itemFrom.parameterId} AS numeric(16,0)),
	                            #{itemFrom.parameterIndexType}, 
	                            CAST(#{itemFrom.parameterIndexId} AS numeric(16,0)),
	                            #{itemFrom.businessLogicId}
	                        )
	                    </foreach>;
	               </if>
	                  <if test="item.lstToIndex != null and  item.lstToIndex.size() > 0 ">
	                    INSERT INTO bd_parameter_index
	                    (
	                        table_type, 
	                        table_id, 
	                        parameter_id, 
	                        parameter_index_type, 
	                        parameter_index_id,
	                        business_logic_id
	                    )
	                    VALUES
	                    <foreach item="itemTo" collection="item.lstToIndex" separator=",">
	                        (
	                            #{itemTo.tableType}, 
	                            #{item.loopComponentId},
	                            CAST(#{itemTo.parameterId} AS numeric(16,0)),
	                            #{itemTo.parameterIndexType}, 
	                            CAST(#{itemTo.parameterIndexId} AS numeric(16,0)),
	                            #{itemTo.businessLogicId}
	                        )
	                    </foreach>;
	                </if>
				</foreach>
			</if>
    </insert>
    <select id="findLoopComponentByBusinessLogic" resultMap="loopComponentResultMap">
		SELECT 
			a.loop_component_id, 
			a.label, 
			a.loop_type, 
			a.parameter_scope, 
			a.parameter_id, 
       		a.from_scope, 
       		a.from_value, 
       		a.to_scope, 
       		a.to_value, 
       		a.formula_definition_id, 
       		a.formula_definition_content, 
       		a.sequence_logic_id, 
       		a.remark,
       		a.index,
       		a.loop_step_type,
            a.loop_step_value
  		FROM loop_component a
		WHERE EXISTS
    		( 
    		SELECT b.sequence_logic_id
     		FROM sequence_logic b
     		WHERE b.business_logic_id = #{businessLogicId}
       			AND component_type = 10
       			AND b.sequence_logic_id = a.sequence_logic_id
       		)
    </select>
    <select id="findLoopComponentByModuleId" resultMap="loopComponentResultMap">
		SELECT 
			a.loop_component_id, 
			a.label, 
			a.loop_type, 
			a.parameter_scope, 
			a.parameter_id, 
       		a.from_scope, 
       		a.from_value, 
       		a.to_scope, 
       		a.to_value, 
       		a.formula_definition_id, 
       		a.formula_definition_content, 
       		a.sequence_logic_id, 
       		a.remark,
       		a.index,
       		a.loop_step_type,
            a.loop_step_value
  		FROM loop_component a
		WHERE EXISTS
    		( 
    		SELECT b.sequence_logic_id
     		FROM sequence_logic b
     		INNER JOIN business_logic bl ON b.business_logic_id = bl.business_logic_id
     		WHERE bl.module_id = #{moduleId}
       			AND component_type = 10
       			AND b.sequence_logic_id = a.sequence_logic_id
       		)
    </select>
    
    <select id="findLoopComponentByProjectId" resultMap="loopComponentResultMap">
		SELECT 
			a.loop_component_id, 
			a.label, 
			a.loop_type, 
			a.parameter_scope, 
			a.parameter_id, 
       		a.from_scope, 
       		a.from_value, 
       		a.to_scope, 
       		a.to_value, 
       		a.formula_definition_id, 
       		a.formula_definition_content, 
       		a.sequence_logic_id, 
       		a.remark,
       		a.index,
       		a.loop_step_type,
            a.loop_step_value
  		FROM loop_component a
		WHERE EXISTS
    		( 
    		SELECT b.sequence_logic_id
     		FROM sequence_logic b
     		INNER JOIN business_logic bl ON b.business_logic_id = bl.business_logic_id
     		WHERE bl.project_id = #{projectId}
       			AND component_type = 10
       			AND b.sequence_logic_id = a.sequence_logic_id
       		)
    </select>
    
    <select id="getBusinessDesignCommonComponentGeneration" resultMap="businessDesignResultMap">
    	SELECT 
				t3.*
		FROM
				loop_component t1
			INNER JOIN sequence_logic t2 ON t1.sequence_logic_id = t2.sequence_logic_id
			INNER JOIN business_logic t3 ON t2.business_logic_id = t3.business_logic_id
		WHERE
				t1.loop_component_id = #{loopComponentId}
    </select>
    
    <select id="getSequenceLogicCommonComponentGeneration" resultMap="sequenceLogicResultMap">
    	SELECT 
				t2.*
		FROM
				loop_component t1
			INNER JOIN sequence_logic t2 ON t1.sequence_logic_id = t2.sequence_logic_id
		WHERE
				t1.loop_component_id = #{loopComponentId}
    </select>
    
    <select id="findLoopComponentByModuleCommon" resultMap="loopComponentResultMap">
        SELECT 
            a.loop_component_id, 
            a.label, 
            a.loop_type, 
            a.parameter_scope, 
            a.parameter_id, 
            a.from_scope, 
            a.from_value, 
            a.to_scope, 
            a.to_value, 
            a.formula_definition_id, 
            a.formula_definition_content, 
            a.sequence_logic_id, 
            a.remark,
            a.index,
            a.loop_step_type,
            a.loop_step_value
        FROM loop_component a
        WHERE EXISTS
            ( 
            SELECT b.sequence_logic_id
            FROM sequence_logic b
            INNER JOIN business_logic bl ON b.business_logic_id = bl.business_logic_id
            WHERE bl.project_id = #{projectId} AND bl.module_id is null and bl.blogic_type = 1   
                AND component_type = 10
                AND b.sequence_logic_id = a.sequence_logic_id
            )
    </select>
</mapper>
