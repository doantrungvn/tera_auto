<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.terasoluna.qp.domain.repository.tabledesign.TableDesignRepository">

	<resultMap id="tableResultMap" type="org.terasoluna.qp.domain.model.TableDesign">
		<result property="tableDesignId" column="tbl_design_id" />
		<result property="tableName" column="tbl_design_name" />
		<result property="tableCode" column="tbl_design_code" />
		<result property="x" column="x_coordinates" />
		<result property="y" column="y_coordinates" />
		<result property="remark" column="remark" />
		<result property="projectId" column="project_id" />
		<result property="projectName" column="project_name" />
		<result property="columnsText" column="columns_text" />
		<result property="createdBy" column="created_by" />
		<result property="createdDate" column="created_date" />
		<result property="updatedBy" column="updated_by" />
		<result property="updatedDate" column="updated_date" />
		<result property="designStatus" column="design_status" />
		<result property="type" column="type" />
		<result property="commonColumn" column="used_common_column_flg" />
        <result property="author" column="username" />
	</resultMap>
	
	<resultMap id="autocomplete" type="Autocomplete">
		<result property="optionValue" column="optionValue" />
		<result property="optionLabel" column="optionLabel" />
		<result property="output01" column="output01" />
		<result property="output02" column="output02" />
	</resultMap>
	
	<resultMap id="businessLogic" type="BusinessLogic">
		<result property="businessLogicId" column="business_logic_id" />
		<result property="businessLogicCode" column="business_logic_code" />
		<result property="businessLogicName" column="business_logic_name" />
		<result property="designStatus" column="design_status" />
		<result property="moduleName" column="module_name" />
		<result property="moduleId" column="module_id" />
		<result property="tableDesignId" column="tbl_design_id" />
		<result property="columnId" column="column_id" />
		<result property="columnName" column="column_name" />
		<result property="dataType" column="data_type" />
		<result property="dataTypeName" column="data_type_name" />
		<result property="autoFix" column="auto_fix" />
		<result property="columnStatus" column="column_status" />
	</resultMap>
	
	<resultMap id="sqlDesign" type="SqlDesign">
		<result property="sqlDesignId" column="sql_design_id" />
		<result property="sqlDesignName" column="sql_design_name" />
		<result property="sqlDesignCode" column="sql_design_code" />
		<result property="remark" column="remark" />
		<result property="designType" column="design_type" />
		<result property="omitOverlap" column="omit_overlap" />
		<result property="moduleId" column="module_id" />
		<result property="designStatus" column="design_status" />
		<result property="moduleName" column="module_name" />
	</resultMap>
	
	<sql id="findPageByCriteriaWhere">
		<where>
			<if test="criteria.tableName != null and criteria.tableName != ''">
				<bind name="tableName" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.tableName)" />
				<![CDATA[
					AND t.tbl_design_name ILIKE #{tableName} ESCAPE '~'
				]]>
			</if>
			
			<if test="criteria.tableCode != null and criteria.tableCode != ''">
				<bind name="tableCode" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.tableCode)" />
				<![CDATA[
					AND t.tbl_design_code ILIKE #{tableCode} ESCAPE '~'
				]]>
			</if>

			<if test="criteria.projectId != null and criteria.projectId != ''">
				<![CDATA[
					AND t.project_id = #{criteria.projectId}
				]]>
			</if>
			
			<if test="criteria.designStatus != null and criteria.designStatus.length > 0">
                AND design_status IN              
                <foreach item="status" index="index" collection="criteria.designStatus" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            
            <if test="criteria.types != null and criteria.types.length > 0">
                AND type IN              
                <foreach item="type" index="index" collection="criteria.types" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>

			<if test="criteria.subjectAreaId != null and criteria.subjectAreaId > 0">
				AND
					EXISTS
						(
							SELECT
								1
							FROM
								subject_area_design_table s
							WHERE
								t.tbl_design_id = s.tbl_design_id AND s.sub_area_design_id = #{criteria.subjectAreaId}
						)
			</if>
		</where>
	</sql>
	
	<select id="findPageByCriteria" parameterType="org.terasoluna.qp.domain.repository.tabledesign.TableDesignCriteria" resultMap="tableResultMap">
		SELECT 
			t.tbl_design_id,
			t.tbl_design_name,
			t.tbl_design_code,
			t.x_coordinates,
			t.y_coordinates,
			t.remark,
			t.project_id,
			t.created_by,
			t.created_date,
			t.updated_by,
			t.updated_date,
			t.design_status,
			t.type
		FROM 
			table_design t

		<include refid="findPageByCriteriaWhere" />
		
		<if test="pageable.sort != null">
			ORDER BY
			<foreach collection="pageable.sort" item="table" separator=",">
				<![CDATA[
					${table.property} ${table.direction}
				]]>
			</foreach>
		</if>
		<if test="pageable.sort == null">
			ORDER BY updated_date DESC
		</if>
		<if test="pageable.pageSize != null">
			LIMIT
				#{pageable.pageSize}
		</if>
			OFFSET
				#{pageable.offset}
	</select>
	
	<select id="findTableDDL" parameterType="org.terasoluna.qp.domain.repository.tabledesign.TableDesignCriteria" resultMap="tableResultMap">
		SELECT 
			t.tbl_design_id,
			t.tbl_design_name,
			t.tbl_design_code,
			t.x_coordinates,
			t.y_coordinates,
			t.remark,
			t.project_id,
			t.created_by,
			t.created_date,
			t.updated_by,
			t.updated_date,
			t.design_status,
			t.type
		FROM 
			table_design t

		<include refid="findPageByCriteriaWhere" />
		ORDER BY updated_date DESC
	</select>
	
	<select id="countByCriteria" parameterType="org.terasoluna.qp.domain.repository.tabledesign.TableDesignCriteria" resultType="Long">
		SELECT 
			COUNT (*)
		FROM 
			table_design t
			
		<include refid="findPageByCriteriaWhere" />
	</select>
	
	<select id="findOneById" parameterType="Long" resultMap="tableResultMap">
		<![CDATA[
			SELECT 
				t.tbl_design_id,
				t.tbl_design_name,
				t.project_id,
				p.project_name,
				t.tbl_design_code,
				t.x_coordinates,
				t.y_coordinates,
				t.remark,
				t.created_by,
				t.created_date,
				t.updated_by,
				t.updated_date,
				t.design_status,
				t.type,
				t.used_common_column_flg
			FROM 
				table_design t
			LEFT JOIN project p
				ON t.project_id = p.project_id
			WHERE 
				tbl_design_id = #{tableDesignId}
		]]>
	</select>

	<select id="getTableDesignBySubjectAreaId" parameterType="Long" resultMap="tableResultMap">
		<![CDATA[
			SELECT 
				table_design.tbl_design_id,
				table_design.tbl_design_name,
				table_design.tbl_design_code,
				table_design.x_coordinates,
				table_design.y_coordinates,
				table_design.remark,
				table_design.project_id,
				table_design.created_by,
				table_design.created_date,
				table_design.updated_by,
				table_design.updated_date,
				design_status
			FROM 
				table_design
			INNER JOIN 
				subject_area_design_table
			ON 
				table_design.tbl_design_id = subject_area_design_table.tbl_design_id
			WHERE 
				subject_area_design_table.sub_area_design_id = #{areaId}
		]]>
	</select>

	<select id="getTableDesignByProjectId" parameterType="Long" resultMap="tableResultMap">
		<![CDATA[
			SELECT 
				td.tbl_design_id,
				td.tbl_design_name,
				td.tbl_design_code,
				td.x_coordinates,
				td.y_coordinates,
				td.design_status,
				td.remark,
				td.created_by,
				td.created_date,
				td.updated_by,
				td.updated_date,
                acc.username
			FROM 
				table_design td
            LEFT JOIN account acc ON (acc.account_id = td.created_by)
			WHERE 
				project_id = #{projectId}
		]]>
	</select>
	
	<select id="getTableDesignDetailsByTableId" parameterType="Long" resultMap="tableResultMap">
		<![CDATA[
			SELECT 
				column_id,
				tbl_design_id,
				column_name,
				column_code,
				maxlength,
				required_flg,
				key_type,
				data_type_flg,
				default_value,
				remark
			FROM 
				table_design_details
			WHERE 
				tbl_design_id = #{tableDesignId}
		]]>
	</select>

	<insert id="create" parameterType="TableDesign">
		<selectKey keyProperty="tableDesignId" resultType="Long" order="BEFORE">
			SELECT nextval('tbl_design_seq') AS tableDesignId
		</selectKey>
		<![CDATA[
			INSERT INTO
				table_design
			(
				tbl_design_id,
				tbl_design_name,
				tbl_design_code,
				x_coordinates,
				y_coordinates,
				project_id,
				remark,
				created_by,
				created_date,
				updated_by,
				updated_date,
				design_status,
				type,
				used_common_column_flg
			)
			VALUES
			(
				#{tableDesignId},
				#{tableName},
				#{tableCode},
				#{x},
				#{y},
				#{projectId},
				#{remark},
				#{createdBy},
				#{createdDate},
				#{updatedBy},
				#{updatedDate},
				#{designStatus},
				#{type},
				#{commonColumn}
			)
		]]>
	</insert>
	
	<insert id="createTableUseId" parameterType="TableDesign">
		<![CDATA[
			INSERT INTO
				table_design
			(
				tbl_design_id,
				tbl_design_name,
				tbl_design_code,
				x_coordinates,
				y_coordinates,
				project_id,
				remark,
				created_by,
				created_date,
				updated_by,
				updated_date,
				design_status,
				type,
				used_common_column_flg
			)
			VALUES
			(
				#{tableDesignId},
				#{tableName},
				#{tableCode},
				#{x},
				#{y},
				#{projectId},
				#{remark},
				#{createdBy},
				#{createdDate},
				#{updatedBy},
				#{updatedDate},
				#{designStatus},
				#{type},
				#{commonColumn}
			)
		]]>
	</insert>
	
	<insert id="multiCreateTable">
		INSERT INTO
				table_design
			(
				tbl_design_id,
				tbl_design_name,
				tbl_design_code,
				x_coordinates,
				y_coordinates,
				project_id,
				remark,
				created_by,
				created_date,
				updated_by,
				updated_date,
				design_status,
				type,
				used_common_column_flg
			)
			VALUES
		<foreach item="item" collection="tableDesigns" separator=",">
		(
				#{item.tableDesignId},
				#{item.tableName},
				#{item.tableCode},
				#{item.x},
				#{item.y},
				#{item.projectId},
				#{item.remark},
				#{item.createdBy},
				#{item.createdDate},
				#{item.updatedBy},
				#{item.updatedDate},
				#{item.designStatus},
				#{item.type},
				#{item.commonColumn}
		)
		</foreach>
	</insert>
	
	<update id="modifyTableDesign" parameterType="TableDesign" >
			UPDATE 
				table_design
			SET 
				tbl_design_name = #{tableName},
				tbl_design_code = #{tableCode},
				x_coordinates = #{x},
				y_coordinates = #{y},
				project_id = #{projectId},
				remark = #{remark},
				type = #{type},
				used_common_column_flg = #{commonColumn},
				updated_date = #{systemTime},
				updated_by = #{updatedBy}
			WHERE 
				tbl_design_id = #{tableDesignId}
			AND 
				updated_date = #{updatedDate}
			<if test="projectId != null">
				AND 
					project_id = #{projectId}
			</if>
	</update>
	
	<update id="modifyTableDesignCommon" parameterType="TableDesign" >
			UPDATE 
				table_design
			SET 
				updated_date = #{systemTime},
				updated_by = #{updatedBy}
			WHERE 
				tbl_design_id = #{tableDesignId}
			AND 
				updated_date = #{updatedDate}
	</update>
	
	<update id="updateItem" parameterType="TableDesign">
		<![CDATA[
			UPDATE 
				table_design
			SET
				updated_date = #{systemTime},
				updated_by = #{updatedBy}
			WHERE 
				tbl_design_id = #{tableDesignId}
			AND
				updated_date = #{updatedDate}
			AND 
				project_id = #{projectId};
		]]>		
			
		<foreach item="item" collection="listTableDesignDetails" separator=";">
		<![CDATA[
			UPDATE 
				table_design_details
			SET
				item_type=#{item.itemType},
				display_type=#{item.displayType}
			WHERE 
				column_id = #{item.columnId}
		]]>
		</foreach>
		
	</update>
	
	<!-- DungNN - 20150613 - add some delete -->
	<delete id="delete" parameterType="Long">
		<![CDATA[
			DELETE FROM
				user_define_codelist_detail udcl
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_details tdd
						WHERE
							udcl.codelist_id = tdd.datasource_id
						AND
							tdd.constrains_type = 2
						AND
							tdd.datasource_type = 0
						AND	
							tdd.tbl_design_id = #{tableDesignId}
					);
			DELETE FROM
				user_define_codelist udc
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_details tdd
						WHERE
							udc.codelist_id = tdd.datasource_id
						AND
							tdd.constrains_type = 2
						AND
							tdd.datasource_type = 0
						AND	
							tdd.tbl_design_id = #{tableDesignId}
					);
					
			DELETE FROM
				subject_area_design_table
			WHERE 
				tbl_design_id = #{tableDesignId};

			DELETE FROM
				table_design_key_items i
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_key t
						WHERE
							i.tbl_design_key_id = t.tbl_design_key_id
						AND
							t.tbl_design_id = #{tableDesignId}
					);

			DELETE FROM
				table_design_key
			WHERE
				tbl_design_id = #{tableDesignId};
				
			DELETE FROM 
				table_design_foreign_key
			WHERE
				to_tbl_design_id = #{tableDesignId}
			OR
				from_tbl_design_id = #{tableDesignId};

			DELETE 
				FROM table_design_details
			WHERE 
				tbl_design_id = #{tableDesignId};

			DELETE FROM 
				table_design
			WHERE 
				tbl_design_id = #{tableDesignId};
			
		]]>
	</delete>
	
	<select id="getAllTableDesignAC"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		SELECT
			tbl_design_id AS optionValue,
			tbl_design_name AS optionLabel
		FROM 
			table_design
		<where>
			<if test="searchKey != null and searchKey != ''">
				<![CDATA[ AND tbl_design_name iLIKE '%' || #{searchKey} || '%' ]]>
			</if>
			<if test="arg01 !=null and arg01 !=''">
				<![CDATA[ AND tbl_design_id IN ${arg01}]]>
			</if>
			<if test="arg01 ==null or arg01 ==''">
				<![CDATA[ AND FALSE]]>
			</if>
		</where>
		ORDER BY 
			tbl_design_id
	</select>
	
	<select id="getAllAutocompleteACLoadModify"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
			SELECT
				ad.autocomplete_id AS optionValue,
				ad.autocomplete_code AS output01,
				sd.design_type AS output02,
				CASE WHEN sd.design_type = 2 THEN '[Autocomplete] ' || ad.autocomplete_name
            		 WHEN sd.design_type = 3 THEN '[Advanced Autocomplete] ' || ad.autocomplete_name
            		ELSE 'other'
       			END AS optionLabel
			FROM 
				sql_design sd
			INNER JOIN
				autocomplete_design ad ON ad.sql_design_id = sd.sql_design_id
			<where>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND sd.project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND ad.autocomplete_id = ${arg02}]]>
				</if>
			</where>
	</select>
	
	<select id="getAllSqlBuilderACLoadModify"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
			SELECT
				sql_design_id AS optionValue,
				sql_design_code AS output01,
				design_type AS output02,
				CASE WHEN design_type = 4 THEN '[SQL builder] ' || sql_design_name
            		 WHEN design_type = 5 THEN '[Advanced SQL] ' || sql_design_name
            		ELSE 'other'
       			END AS optionLabel
			FROM 
				sql_design
			<where>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND sql_design_id = ${arg02}]]>
				</if>
			</where>
	</select>
	
	<select id="getAllSqlBuilderAC"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
			SELECT
				sql_design_id AS optionValue,
				'[SQL builder] ' || sql_design_name AS optionLabel,
				sql_design_code AS output01,
				design_type AS output02
			FROM 
				sql_design
			<where>
				<if test="searchKey != null and searchKey != ''" >
					<![CDATA[
						AND sql_design_name ILIKE '%' || #{searchKey} || '%'
					]]>
				</if>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND sql_design_id = ${arg02}]]>
				</if>
				<if test="arg04 !=null ">
					<![CDATA[ AND sql_pattern = ${arg04}]]>
				</if>
				AND design_type = 4
				AND return_type = 1
			</where>
			
			UNION ALL
			
			SELECT
				sql_design_id AS optionValue,
				'[Advanced SQL] ' || sql_design_name AS optionLabel,
				sql_design_code AS output01,
				design_type AS output02
			FROM 
				sql_design
			<where>
				<if test="searchKey != null and searchKey != ''" >
					<![CDATA[
						AND sql_design_name ILIKE '%' || #{searchKey} || '%'
					]]>
				</if>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND sql_design_id = ${arg02}]]>
				</if>
				<if test="arg04 !=null ">
					<![CDATA[ AND sql_pattern = ${arg04}]]>
				</if>
				AND design_type = 5
				AND return_type = 1
			</where>
			
			UNION ALL
			
			SELECT
				ad.autocomplete_id AS optionValue,
				'[Autocomplete] ' || ad.autocomplete_name AS optionLabel,
				ad.autocomplete_code AS output01,
				sd.design_type AS output02
			FROM 
				sql_design sd
			INNER JOIN
				autocomplete_design ad ON ad.sql_design_id = sd.sql_design_id
	
			<where>
				<if test="searchKey != null and searchKey != ''" >
					<![CDATA[
						AND ad.autocomplete_name ILIKE '%' || #{searchKey} || '%'
					]]>
				</if>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND sd.project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND sd.sql_design_id = ${arg02}]]>
				</if>
				<if test="arg04 !=null ">
					<![CDATA[ AND sql_pattern = ${arg04}]]>
				</if>
				AND sd.design_type = 2
			</where>
			
			UNION ALL
			
			SELECT
				ad.autocomplete_id AS optionValue,
				'[Advanced Autocomplete] ' || ad.autocomplete_name AS optionLabel,
				ad.autocomplete_code AS output01,
				sd.design_type AS output02
			FROM 
				sql_design sd
			INNER JOIN
				autocomplete_design ad ON ad.sql_design_id = sd.sql_design_id
	
			<where>
				<if test="searchKey != null and searchKey != ''" >
					<![CDATA[
						AND ad.autocomplete_name ILIKE '%' || #{searchKey} || '%'
					]]>
				</if>
				<if test="arg01 !=null and arg01 !=''">
					<![CDATA[ AND sd.project_id = ${arg01}]]>
				</if>
				<if test="arg01 ==null or arg01 ==''">
					<![CDATA[ AND FALSE]]>
				</if>
				<if test="arg02 !=null and arg02 !=''">
					<![CDATA[ AND sd.sql_design_id = ${arg02}]]>
				</if>
				<if test="arg04 !=null ">
					<![CDATA[ AND sql_pattern = ${arg04}]]>
				</if>
				AND sd.design_type = 3
			</where>
	
			ORDER BY 
				optionLabel DESC
			<if test="arg03 != null and arg03 != ''">
				<![CDATA[
					LIMIT CAST(#{arg03} AS numeric(16,0))
				]]>
			</if>
			<if test="arg03 == null or arg03 == ''">
				LIMIT 20
			</if>
	</select>
	<select id="findColumnByDatasource"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		SELECT
			sdr.result_id AS optionValue,
			tdd.column_name AS optionLabel
		FROM 
			sql_design_results sdr LEFT JOIN table_design_details tdd
		ON sdr.column_id = tdd.column_id
		<where>
			<if test="searchKey != null and searchKey != ''" >
				<![CDATA[
					AND tdd.column_name ILIKE '%' || #{searchKey} || '%'
				]]>
			</if>
			<![CDATA[ AND sdr.sql_design_id = ${arg01}]]>
		</where>
		<if test="arg02 != null and arg02 != ''">
			<![CDATA[
				LIMIT CAST(#{arg02} AS numeric(16,0))
			]]>
		</if>
		<if test="arg02 == null or arg02 == ''">
			LIMIT 20
		</if>
			
	</select>
	
	<select id="getAllCodeList" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		SELECT
			C.codelist_id AS optionValue,
			C.codelist_code AS optionLabel,
			C.codelist_name AS output01
		FROM
			codelist as C
		<where>
			<if test="searchKey != null and searchKey != ''" >
				<![CDATA[
					AND C.codelist_name ILIKE '%' || #{searchKey} || '%'
				]]>
			</if>
			<if test="arg02 != null and arg02 != ''" >
				<![CDATA[
					AND C.codelist_id = ${arg02}
				]]>
			</if>
			<if test="arg01 !=null and arg01 !=''">
				<![CDATA[ AND C.project_id = ${arg01}]]>
			</if>
			<if test="arg01 ==null or arg01 ==''">
				<![CDATA[ AND FALSE]]>
			</if>
		</where>
		
		ORDER BY 
			C.codelist_name DESC
		<if test="arg02 != null and arg02 != ''">
			<![CDATA[
				LIMIT CAST(#{arg02} AS numeric(16,0))
			]]>
		</if>
		<if test="arg02 == null or arg02 == ''">
			LIMIT 20
		</if>
	</select>
	
	<select id="getAllCodeListDetail" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		SELECT
			value AS optionValue,
			(CASE WHEN key IS NULL OR key = '' THEN value ELSE key END ) AS optionLabel
		FROM 
			codelist_detail
		<where>
			<if test="arg03 !=null and arg03 !=''">
				<![CDATA[ AND value =  CAST(#{arg03} AS text)]]>
			</if>
			<if test="arg02 !=null and arg02 !=''">
				<![CDATA[ AND codelist_id = ${arg02}]]>
			</if>
			<if test="arg02 ==null or arg02 ==''">
				<![CDATA[ AND FALSE]]>
			</if>
		</where>
	</select>
	
	<select id="getAllTableDesignByProjectId"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		SELECT * FROM
			(
				SELECT
					tbl_design_id AS optionValue,
					tbl_design_name AS optionLabel,
					tbl_design_code AS output01,
					'0' AS output05,
					updated_date
				FROM 
					table_design
				<where>
					<if test="searchKey != null and searchKey != ''">
						<![CDATA[ AND tbl_design_name iLIKE '%' || #{searchKey} || '%' ]]>
					</if>
					<if test="arg01 !=null and arg01 !=''">
						<![CDATA[ AND tbl_design_id IN ${arg01}]]>
					</if>
					<if test="arg02 != null and arg02 != ''">
						<![CDATA[
							AND project_id = ${arg02}
						]]>
					</if>
					 <if test="arg02 == null or arg02 == ''">
						<![CDATA[
						AND FALSE
					]]>
					</if>
					<if test="arg03 !=null and arg03 !='' and arg03 !='()'">
						<![CDATA[ AND tbl_design_id <> ${arg03}]]>
					</if>
				</where>
					
				UNION 
					SELECT A.sql_design_id as optionValue,
							A.sql_design_name as optionLabel,
							A.sql_design_code as output01,
							'1' AS output05,
							updated_date
					FROM sql_design A
					WHERE (design_type = 0 OR design_type = 1) 
							<if test="searchKey != null and searchKey != ''">
								<![CDATA[ AND sql_design_name iLIKE '%' || #{searchKey} || '%' ]]>
							</if>
							<if test="arg02 != null and arg02 != ''">
								<![CDATA[
									AND project_id = ${arg02}
								]]>
							</if>
							<if test="arg02 == null or arg02 == ''">
								<![CDATA[
								AND project_id = 0
							]]>
							</if>
							<if test="arg01 !=null and arg01 !=''">
								<![CDATA[ AND sql_design_id IN ${arg01}]]>
							</if>
							<if test="arg03 !=null and arg03 !='' and arg03 !='()'">
								<![CDATA[ AND A.sql_design_id <> ${arg03}]]>
							</if>
				) AS tempTablle ORDER BY updated_date DESC
			LIMIT 20
	</select>
	
	<select id="getAllTableDesignByProjectIdWithColumns"
		parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput"
		resultMap="autocomplete">
		(<choose>
			<when  test="arg03 !=null and arg03 !='' and arg03 !='()'">
				SELECT
					A.tbl_design_id AS optionValue,
					A.tbl_design_name AS optionLabel,
					A.tbl_design_code AS output01,
					B.columns_num AS output02,
					B.columns_text AS output03,
					(
						SELECT STRING_AGG(C.column_id || ':' ||D.column_name || ':' || D.column_code || ':' || D.base_type , ',' ORDER BY C.column_id)
						FROM 
						table_design_key_items C
						LEFT JOIN
						(
							SELECT
								d.column_id, 
								d.tbl_design_id, 
								d.column_name, 
								d.column_code, 
								e.base_type
							FROM
								table_design_details d LEFT JOIN domain_design e 
								ON  d.data_type = e.domain_id
							WHERE 
								d.data_type_flg = 1
							UNION ALL
							SELECT
								d.column_id, 
								d.tbl_design_id,
								d.column_name, 
								d.column_code, 
								d.data_type AS base_type
							FROM
								table_design_details d 
								LEFT JOIN	resources e ON e.category_cd = 'clBasetype' 
								AND d.data_type = CAST (e.value2 AS NUMERIC)
							WHERE 
								d.data_type_flg = 0
						) D
						ON C.column_id = D.column_id
						WHERE C.tbl_design_key_id = (SELECT tbl_design_key_id FROM table_design_key WHERE tbl_design_id = A.tbl_design_id AND tbl_design_key_type = 1 LIMIT 1)
					) AS output04,
					'0' AS output05,
					CASE 
						WHEN  
							(
								SELECT COUNT(*)
								FROM table_design_foreign_key c
								WHERE c.from_tbl_design_id IN ${arg03} AND A.tbl_design_id = c.to_tbl_design_id
							) > 0
						THEN 1
						ELSE 0
					END as FK
				FROM 
					table_design A
					LEFT JOIN 
					(
						SELECT tbl_design_id,count(column_id) as columns_num,
								STRING_AGG(column_id || ':' ||column_name || ':' || column_code || ':' || base_type, ',' ORDER BY column_id) As columns_text
						FROM 
						
						(	SELECT
								d.column_id, 
								d.tbl_design_id, 
								d.column_name, 
								d.column_code, 
								e.base_type
							FROM
								table_design_details d LEFT JOIN domain_design e 
								ON  d.data_type = e.domain_id
							WHERE 
								d.data_type_flg = 1
							UNION ALL
							SELECT
								d.column_id, 
								d.tbl_design_id,
								d.column_name, 
								d.column_code, 
								d.data_type AS base_type
							FROM
								table_design_details d 
								LEFT JOIN	resources e ON e.category_cd = 'clBasetype' 
								AND d.data_type = CAST (e.value2 AS NUMERIC)
							WHERE 
								d.data_type_flg = 0
						) table_design_details 
						GROUP BY tbl_design_id
					) B
					ON A.tbl_design_id = B.tbl_design_id	
					<include refid="getAllTableCriteria"></include>	
			</when >
			<otherwise>
				SELECT
					A.tbl_design_id AS optionValue,
					A.tbl_design_name AS optionLabel,
					A.tbl_design_code AS output01,
					B.columns_num AS output02,
					B.columns_text AS output03,
					(
						SELECT STRING_AGG(C.column_id || ':' ||D.column_name || ':' || D.column_code || ':' || D.base_type, ',' ORDER BY C.column_id)
						FROM 
						table_design_key_items C
						LEFT JOIN
						(
							SELECT
								d.column_id, 
								d.tbl_design_id, 
								d.column_name, 
								d.column_code, 
								e.base_type
							FROM
								table_design_details d LEFT JOIN domain_design e 
								ON  d.data_type = e.domain_id
							WHERE 
								d.data_type_flg = 1
							UNION ALL
							SELECT
								d.column_id, 
								d.tbl_design_id,
								d.column_name, 
								d.column_code, 
								d.data_type AS base_type
							FROM
								table_design_details d 
								LEFT JOIN	resources e ON e.category_cd = 'clBasetype' 
								AND d.data_type = CAST (e.value2 AS NUMERIC)
							WHERE 
								d.data_type_flg = 0
						) D 
						ON C.column_id = D.column_id
						WHERE C.tbl_design_key_id = (SELECT tbl_design_key_id FROM table_design_key WHERE tbl_design_id = A.tbl_design_id AND tbl_design_key_type = 1 LIMIT 1)
					) AS output04,
					'0' AS output05,
					0 AS FK
				FROM 
					table_design A
					LEFT JOIN 
					(
						SELECT tbl_design_id,count(column_id) as columns_num,
								STRING_AGG(column_id || ':' ||column_name || ':' || column_code || ':' || base_type, ',' ORDER BY column_id) As columns_text
						FROM 
						(	SELECT
								d.column_id, 
								d.tbl_design_id, 
								d.column_name, 
								d.column_code, 
								e.base_type
							FROM
								table_design_details d LEFT JOIN domain_design e 
								ON  d.data_type = e.domain_id
							WHERE 
								d.data_type_flg = 1
							UNION ALL
							SELECT
								d.column_id, 
								d.tbl_design_id,
								d.column_name, 
								d.column_code, 
								d.data_type AS base_type
							FROM
								table_design_details d 
								LEFT JOIN	resources e ON e.category_cd = 'clBasetype' 
								AND d.data_type = CAST (e.value2 AS NUMERIC)
							WHERE 
								d.data_type_flg = 0
						) table_design_details
						
						GROUP BY tbl_design_id
					) B
					ON A.tbl_design_id = B.tbl_design_id	
					<include refid="getAllTableCriteria"></include>		
			</otherwise>
		</choose>
		)
<!-- 		UNION -->
<!-- 					(SELECT A.sql_design_id as optionValue, -->
<!-- 							A.sql_design_name as optionLabel, -->
<!-- 							A.sql_design_code as output01, -->
<!-- 							B.columns_num AS output02, -->
<!-- 							B.columns_text AS output03, -->
<!-- 							'' as output04, -->
<!-- 							'1' AS output05, -->
<!-- 							0 as FK -->
<!-- 							FROM sql_design A -->
							
<!-- 							LEFT JOIN  -->
<!-- 							( -->
<!-- 								SELECT sql_design_id,count(C.column_id) as columns_num, -->
<!-- 										STRING_AGG(C.column_id || ':' ||D.column_name || ':' || D.column_code, ',' ORDER BY C.column_id) As columns_text -->
<!-- 								FROM sql_design_results C -->
<!-- 								LEFT JOIN table_design_details D -->
<!-- 								ON C.column_id = D.column_id -->
<!-- 								GROUP BY sql_design_id -->
<!-- 							) B -->
<!-- 							ON A.sql_design_id = B.sql_design_id -->
<!-- 					<where> -->
<!-- 						<if test="searchKey != null and searchKey != ''"> -->
<!-- 							<![CDATA[ AND sql_design_name iLIKE '%' || #{searchKey} || '%' ]]> -->
<!-- 						</if> -->
<!-- 						<if test="arg01 !=null and arg01 !=''"> -->
<!-- 							<![CDATA[ AND A.sql_design_id IN ${arg01}]]> -->
<!-- 						</if> -->
<!-- 						AND (design_type = 0 OR design_type = 1)  -->
<!-- 						<if test="arg02 != null and arg02 != ''"> -->
<!-- 							<![CDATA[ -->
<!-- 								AND project_id = ${arg02} -->
<!-- 							]]> -->
<!-- 						</if> -->
<!-- 						 <if test="arg02 == null or arg02 == ''"> -->
<!-- 							<![CDATA[ -->
<!-- 							AND project_id = 0 -->
<!-- 						]]> -->
<!-- 						</if> -->
<!-- 						<if test="arg03 !=null and arg03 !='' and arg03 !='()'"> -->
<!-- 							<![CDATA[ AND A.sql_design_id NOT IN ${arg03}]]> -->
<!-- 						</if> -->
<!-- 					</where> -->
					 
<!-- 					) -->
		<if test="arg04 !=null and arg04 !=''">
				LIMIT cast(${arg04} as numeric(16,0))
		</if>
		<if test="arg04 ==null or arg04 ==''">
				LIMIT 20
		</if>
	</select>
	<sql id="getAllTableCriteria">
		<where>
			<if test="searchKey != null and searchKey != ''">
				<![CDATA[ AND tbl_design_name iLIKE '%' || #{searchKey} || '%' ]]>
			</if>
			<if test="arg01 !=null and arg01 !=''">
				<![CDATA[ AND A.tbl_design_id IN ${arg01}]]>
			</if>
			<if test="arg02 != null and arg02 != ''">
				<![CDATA[
					AND project_id = ${arg02}
				]]>
			</if>
			 <if test="arg02 == null or arg02 == ''">
				<![CDATA[
				AND project_id = 0
			]]>
			</if>
			<if test="arg03 !=null and arg03 !='' and arg03 !='()'">
				<![CDATA[ AND A.tbl_design_id NOT IN ${arg03}]]>
			</if>
		</where>
		ORDER BY 
			FK DESC, A.tbl_design_name
	</sql>
	<!-- DungNN -->
	<select id="getTableDesignByProjectAndSubArea" parameterType="map" resultMap="tableResultMap">
		WITH 
			table_design_temp AS (
				SELECT 
					tbl_design_id
				FROM 
					table_design t
				WHERE
					<![CDATA[ t.project_id = #{projectId}]]>
			
			<if test="areaId != null and areaId > 0">
					AND
						EXISTS
							(
								SELECT
									1
								FROM
									subject_area_design_table s
								WHERE
									t.tbl_design_id = s.tbl_design_id AND s.sub_area_design_id = #{areaId}
							)
			</if>

			<!-- get all table does not belong to subject area -->
			<if test="areaId != null and areaId == -2">
				EXCEPT 

				SELECT 
					tbl_design_id
				FROM 
					subject_area_design_table st 
				WHERE EXISTS
				(
					SELECT
						1 
					FROM 
						subject_area_design s 
					WHERE 
						s.sub_area_design_id  = st.sub_area_design_id
					AND
						<![CDATA[s.project_id = #{projectId}]]>
				)
			</if>
		)

		SELECT 
			tbl_design_id,
			tbl_design_name,
			tbl_design_code,
			x_coordinates,
			y_coordinates,
			design_status,
			type,
			used_common_column_flg,
			remark,
			project_id,
			created_by,
			created_date,
			updated_by,
			updated_date
		FROM 
			table_design t
		WHERE
			EXISTS 
				(
					SELECT
						1
					FROM 
						table_design_temp temp
					WHERE 
						t.tbl_design_id = temp.tbl_design_id
				)
	</select>
	
	<select id="getTableDesignByTableId" parameterType="map" resultMap="tableResultMap">
		SELECT 
			tbl_design_id,
			tbl_design_name,
			tbl_design_code,
			x_coordinates,
			y_coordinates,
			design_status,
			type,
			used_common_column_flg,
			remark,
			project_id,
			created_by,
			created_date,
			updated_by,
			updated_date
		FROM 
			table_design t
		WHERE
			tbl_design_id IN
				<foreach item="item" collection="listTableId" open="(" close=")" separator=",">
					#{item}
				</foreach>
	</select>

	<select id="checkForeikeyWhenDelete" parameterType="Long" resultType="long">
		<![CDATA[
			SELECT 
				COUNT (*)
			FROM 
				sql_design_table
			WHERE 
				tbl_design_id = #{tableDesignId}
			OR
				join_tbl_design_id = #{tableDesignId}
		]]>
	</select>

	<delete id="multiDelete" >
		<foreach item="tableDesign" collection="tableDesigns" >
			<![CDATA[
			DELETE FROM
				user_define_codelist_detail udcl
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_details tdd
						WHERE
							udcl.codelist_id = tdd.datasource_id
						AND
							tdd.constrains_type = 2
						AND
							tdd.datasource_type = 0
						AND	
							tdd.tbl_design_id = #{tableDesign.tableDesignId}
					);
			DELETE FROM
				user_define_codelist udc
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_details tdd
						WHERE
							udc.codelist_id = tdd.datasource_id
						AND
							tdd.constrains_type = 2
						AND
							tdd.datasource_type = 0
						AND	
							tdd.tbl_design_id = #{tableDesign.tableDesignId}
					);
			
			DELETE FROM
				subject_area_design_table
			WHERE 
				tbl_design_id = #{tableDesign.tableDesignId};

			DELETE FROM
				table_design_key_items i
			WHERE
				EXISTS 
					(
						SELECT
							1
						FROM
							table_design_key t
						WHERE
							i.tbl_design_key_id = t.tbl_design_key_id
						AND
							t.tbl_design_id = #{tableDesign.tableDesignId}
					);

			DELETE FROM
				table_design_key
			WHERE
				tbl_design_id = #{tableDesign.tableDesignId};
				
			DELETE FROM 
				table_design_foreign_key
			WHERE
				to_tbl_design_id = #{tableDesign.tableDesignId}
			OR
				from_tbl_design_id = #{tableDesign.tableDesignId};

			DELETE 
				FROM table_design_details
			WHERE 
				tbl_design_id = #{tableDesign.tableDesignId};

			DELETE FROM 
				table_design
			WHERE 
				tbl_design_id = #{tableDesign.tableDesignId};
			]]>
		</foreach>
	</delete>
	
	<!-- //TungHT- update status from view screen -->
	<update id="modifyDesignStatus" parameterType="TableDesign">
		<![CDATA[
			UPDATE 
				table_design
			SET 
				design_status = #{tableDesign.designStatus},
				updated_by = #{tableDesign.updatedBy},
				updated_date = #{tableDesign.systemTime}
			WHERE 
				tbl_design_id = #{tableDesign.tableDesignId}
			AND 
				updated_date = #{tableDesign.updatedDate}
		]]>
	</update>
	
	<select id="countNameCodeByProjectId" parameterType="TableDesign" resultType="Long">
        SELECT 
            SUM(rowVal) AS totalCount 
        FROM (
                (SELECT 
                        1 AS rowVal 
                 FROM 
                        table_design 
                 <where>
	                 <if test="tableName != null and tableName != ''">
                        tbl_design_name = #{tableName}
	                 </if>
	                 <if test="tableDesignId != null">AND tbl_design_id != #{tableDesignId}</if> 
	                 <if test="projectId != null">AND project_id = #{projectId}</if>
	                 <if test="tableName == null and tableName == ''">AND FALSE</if>
                 </where>
                 LIMIT 1
                 ) 
                 UNION
                (SELECT 
                        2 AS rowVal 
                 FROM 
                        table_design
                 <where>
                        <if test="tableCode != null and tableCode != ''">
                            UPPER(tbl_design_code) = UPPER(#{tableCode})
                        </if>
                        <if test="tableDesignId != null">AND tbl_design_id != #{tableDesignId}</if>  
                        <if test="projectId != null">AND project_id = #{projectId}</if>
                        <if test="tableCode == null and tableCode == ''">AND FALSE</if>
                 </where>
                 LIMIT 1
                 )
             ) AS foo
    </select>
    
    <select id="getAllBLogicAffectedByColumnIds" resultType="businessLogic">
    	WITH table_design_temp 
			AS(
					SELECT 
						a1.business_logic_id,
						a1.column_id,
						a1.data_type
					FROM object_definition a1
					WHERE
						<if test="columnIds != null and columnIds.size() > 0">
							a1.column_id in
							 <foreach item="item" index="index" collection="columnIds" open="(" separator="," close=")">
				            	#{item.columnId}
						</foreach>
						</if>
						<if test="columnIds == null or columnIds.size() == 0">
							FALSE
						</if>
						 
						 
					UNION 
					SELECT 
						a2.business_logic_id,
						a2.column_id,
						a2.data_type
					FROM output_bean a2
					WHERE 
						<if test="columnIds != null and columnIds.size() > 0">
							a2.column_id in
							 <foreach item="item" index="index" collection="columnIds" open="(" separator="," close=")">
				            	#{item.columnId}
				            </foreach>
						</if>
						<if test="columnIds == null or columnIds.size() == 0">
							FALSE
						</if>
						 
						 
					UNION
					SELECT 
						d3.business_logic_id,
						a3.column_id,
						a3.data_type
					FROM business_detail_content a3
					LEFT JOIN business_check_detail b3 on (b3.business_check_detail_id = a3.business_check_detail_id)
					LEFT JOIN business_check_component c3 on (c3.business_check_component_id = b3.business_check_component_id)
					LEFT JOIN sequence_logic d3 on (d3.sequence_logic_id = c3.sequence_logic_id)
					WHERE
						<if test="columnIds != null and columnIds.size() > 0">
							a3.column_id in
							 <foreach item="item" index="index" collection="columnIds" open="(" separator="," close=")">
				            	#{item.columnId}
				            </foreach>
						</if>
						<if test="columnIds == null or columnIds.size() == 0">
							FALSE
						</if>
		)
		SELECT
			a.data_type,
			a.column_id,
			b1.business_logic_id,
			b1.business_logic_code,
			b1.business_logic_name,
			m.module_name,
			m.module_id 
		FROM table_design_temp a
		INNER JOIN business_logic b1 ON b1.business_logic_id = a.business_logic_id
		LEFT JOIN module m ON b1.module_id = m.module_id
    </select>
    
    <select id="getAllBLogicAffectedByTableDesignId" resultType="businessLogic">
    	SELECT 	
    		a.business_logic_id, 
			a.business_logic_code, 
			a.business_logic_name,
			a.module_id,
			m.module_name,
			a.project_id
		FROM business_logic a
		LEFT JOIN module m ON m.module_id = a.module_id
		WHERE 
			EXISTS
			(
				SELECT *
				FROM 
				(
					SELECT a1.business_logic_id
					FROM object_definition a1
					WHERE
						a1.data_type = 14 
						and a1.tbl_design_id = #{tableDesignId}
					UNION
					SELECT a2.business_logic_id
					FROM output_bean a2
					WHERE a2.data_type = 14 
						and a2.tbl_design_id = #{tableDesignId}
					UNION
					SELECT d3.business_logic_id
					FROM business_detail_content a3
					LEFT JOIN business_check_detail b3 on (b3.business_check_detail_id = a3.business_check_detail_id)
					LEFT JOIN business_check_component c3 on (c3.business_check_component_id = b3.business_check_component_id)
					LEFT JOIN sequence_logic d3 on (d3.sequence_logic_id = c3.sequence_logic_id)
					WHERE
						a3.tbl_design_id = #{tableDesignId}
				) b1
				where b1.business_logic_id = a.business_logic_id
			) 
    </select>
    
    <select id="getAllBLogicAffected" resultType="businessLogic">
		SELECT DISTINCT
			A.business_logic_name,
			A.business_logic_code,
			A.business_logic_id,
			A.design_status,
			A.module_id,
			A.column_id,
			A.column_name,
			A.data_type,
			A.auto_fix,
			A.column_status,
			m.module_name
		FROM
			(
				<if test="listColumnId !=null and listColumnId.size > 0">
					SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code,
						bl.design_status,
						bl.module_id,
						ob.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type_name,
						0 AS auto_fix,
						15 AS column_status
					FROM business_logic bl
					INNER JOIN output_bean ob ON bl.business_logic_id =  ob.business_logic_id  and ob.column_id IN 
							<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
					UNION ALL
					
					SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code ,
						bl.design_status,
						bl.module_id,
						od.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type_name,
						0 AS auto_fix,
						15 AS column_status
					FROM business_logic bl
					INNER JOIN object_definition od ON bl.business_logic_id = od.business_logic_id  and od.column_id IN
							<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
               </if> 
               <if test="listColumnIdAutoFix !=null and listColumnIdAutoFix.size > 0 and listColumnId !=null and listColumnId.size > 0">
                UNION ALL
               </if>
               	<if test="listColumnIdAutoFix !=null and listColumnIdAutoFix.size > 0">
	                SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code ,
						bl.design_status,
						bl.module_id,
						ob.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type_name,
						1 AS auto_fix,
						16 AS column_status
					FROM business_logic bl
					INNER JOIN output_bean ob ON bl.business_logic_id =  ob.business_logic_id  and ob.column_id IN
							<foreach item="status" index="index" collection="listColumnIdAutoFix" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
					UNION ALL
					
					SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code ,
						bl.design_status,
						bl.module_id,
						od.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type_name,
						1 AS auto_fix,
						16 AS column_status
					FROM business_logic bl
					INNER JOIN object_definition od ON bl.business_logic_id = od.business_logic_id  and od.column_id IN 
							<foreach item="status" index="index" collection="listColumnIdAutoFix" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
               	</if>
               	
               	<if test="listColumnIdAutoFix !=null and listColumnIdAutoFix.size > 0 and listColumnIdDelete !=null and listColumnIdDelete.size > 0">
                UNION ALL
               </if>
               	<if test="listColumnIdDelete !=null and listColumnIdDelete.size > 0">
	                SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code,
						bl.design_status,
						bl.module_id,
						ob.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = ob.column_id
							
						) AS data_type_name,
						0 AS auto_fix,
						17 AS column_status
					FROM business_logic bl
					INNER JOIN output_bean ob ON bl.business_logic_id =  ob.business_logic_id  and ob.column_id IN
							<foreach item="status" index="index" collection="listColumnIdDelete" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
					UNION ALL
					
					SELECT DISTINCT 
						bl.business_logic_id, 
						bl.business_logic_name, 
						bl.business_logic_code,
						bl.design_status,
						bl.module_id,
						od.column_id,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS column_name,
						(
							SELECT 
								data_type
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type,
						(
							SELECT 
								column_name
							FROM 
								table_design_details
							WHERE 
								column_id = od.column_id
							
						) AS data_type_name,
						0 AS auto_fix,
						17 AS column_status
					FROM business_logic bl
					INNER JOIN object_definition od ON bl.business_logic_id = od.business_logic_id  and od.column_id IN 
							<foreach item="status" index="index" collection="listColumnIdDelete" open="(" separator="," close=")">
	                    			#{status}
	                		</foreach>
	                	
               	</if>
			)AS A LEFT JOIN module m ON A.module_id = m.module_id
    </select>
    
    <select id="getAllSqlAffected" resultType="sqlDesign">
		SELECT DISTINCT
			sd.sql_design_id,
			sd.sql_design_name,
			sd.sql_design_code,
			sd.remark,
			sd.design_type,
			sd.omit_overlap,
			sd.module_id,
			sd.design_status,
			m.module_name
		FROM
			(
				SELECT DISTINCT
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_conditions sdc ON sd.sql_design_id = sdc.sql_design_id AND sd.project_id = #{projectId}
				AND (sdc.left_column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach>
				OR sdc.right_column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach>
				)
				UNION ALL
				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_group_by sdgb ON sd.sql_design_id = sdgb.sql_design_id AND sd.project_id = #{projectId}
				AND sdgb.column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
						#{status}
					</foreach>

				UNION ALL
				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_having sdh ON sd.sql_design_id = sdh.sql_design_id AND sd.project_id = #{projectId}
				AND sdh.column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach>

				UNION ALL
				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_input sdi ON sd.sql_design_id = sdi.sql_design_id AND sd.project_id = #{projectId}
				AND sdi.column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach> 
                	
                	UNION ALL
				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_output sdo ON sd.sql_design_id = sdo.sql_design_id AND sd.project_id = #{projectId}
				AND sdo.column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach> 

				UNION ALL

				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN sql_design_results sdr ON sd.sql_design_id = sdr.sql_design_id AND sd.project_id = #{projectId}
				AND sdr.column_id IN 
					<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    	#{status}
                	</foreach> 

				UNION ALL
		
				SELECT 
					sd.sql_design_id,
					sd.sql_design_name,
					sd.sql_design_code,
					sd.remark,
					sd.design_type,
					sd.omit_overlap,
					sd.module_id,
					sd.design_status
				FROM sql_design sd
				INNER JOIN 
					(
						SELECT 
							sdt.sql_design_id
						FROM 
							sql_design_table sdt
						INNER JOIN sql_design_table_items sdti ON sdt.sql_design_table_id = sdti.sql_design_table_id
						AND (sdti.column_id IN 
							<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    			#{status}
                			</foreach> 
						OR sdti.join_column_id IN 
							<foreach item="status" index="index" collection="listColumnId" open="(" separator="," close=")">
                    			#{status}
                			</foreach>
                		)  
					) sdr ON sd.sql_design_id = sdr.sql_design_id
					AND sd.project_id = #{projectId}
			) as sd 
		LEFT JOIN module m ON m.module_id = SD.module_id AND m.project_id = #{projectId}
		ORDER BY sd.sql_design_id
    </select>
    
    <update id="processAffectChangeDesign">
    	UPDATE
    		project
		SET
			status = 1
		WHERE
			project_id = #{tableDesign.projectId};
				
		<foreach item="businessLogic" collection="tableDesigns.listBusinessLogics" >
			<![CDATA[
			UPDATE 
				business_logic
			SET
				design_status = 1
			WHERE
				business_logic_id = #{businessLogic.businessLogicId};
				
			UPDATE 
				sql_design
			SET
				design_status = 1
			WHERE
				sql_design_id = #{businessLogic.sqlDesignId};
			]]>
		</foreach>
    </update>
    
    <update id="multiModify">
		<foreach item="tableDesign" collection="tableDesigns" >
			<![CDATA[
			UPDATE 
				table_design
			SET 
				tbl_design_name = #{tableDesign.tableName},
				tbl_design_code = #{tableDesign.tableCode},
				remark = #{tableDesign.remark},
				updated_date = #{tableDesign.systemTime},
				updated_by = #{tableDesign.updatedBy}
			WHERE 
				tbl_design_id = #{tableDesign.tableDesignId}
			AND 
				updated_date = #{tableDesign.updatedDate}
			AND 
				project_id = #{tableDesign.projectId};
			]]>
		</foreach>
    </update>

    <select id="getLstTableDesignDetails" parameterType="String" resultMap="tableResultMap">
        SELECT
            a.tbl_design_id,
            a.tbl_design_name,
            a.tbl_design_code,
            b.columns_text
        FROM 
            table_design a
            LEFT JOIN 
            (
                SELECT tbl_design_id,
                        STRING_AGG(column_id || ':' ||column_name || ':' || column_code || ':' || group_base_type_id  , ',' ORDER BY column_id) As columns_text
                FROM table_design_details
                GROUP BY tbl_design_id
            ) b
            ON a.tbl_design_id = b.tbl_design_id 
         WHERE  project_id = #{projectId} 
         <if test="tblDesignIds != null and tblDesignIds.length > 0">
            AND a.tbl_design_id IN 
                 <foreach item="item" index="index" collection="tblDesignIds" open="(" separator="," close=")">
                     CAST(#{item} AS numeric(16,0))
                </foreach>
          </if>
        ORDER BY 
            a.tbl_design_id
    </select>
    <select id="findAllTableDesignsBySqlDesignId" resultMap="tableResultMap">
    	SELECT
			A.tbl_design_id,
			A.tbl_design_name,
			A.tbl_design_code
		FROM 
			table_design A
		WHERE EXISTS(
			SELECT column_id
			FROM table_design_details B
			WHERE B.tbl_design_id = A.tbl_design_id 
				AND B.constrains_type = 2 
				AND B.datasource_type = 3 
				AND datasource_id = #{sqlDesignId}
		)
    </select>
    
    <select id="findAllTableDesignsByModuleId" resultMap="tableResultMap">
    	SELECT
			A.tbl_design_id,
			A.tbl_design_name,
			A.tbl_design_code
		FROM 
			table_design A
		WHERE EXISTS(
			SELECT column_id
			FROM table_design_details B
			WHERE B.tbl_design_id = A.tbl_design_id 
				AND B.constrains_type = 2 
				AND B.datasource_type = 1 
				AND datasource_id IN (
										SELECT codelist_id
										FROM codelist
										WHERE module_id = #{moduleId}
									)
		)
    </select>
    
    <select id="getLabelValueBySqlId" resultMap="autocomplete">
		SELECT
			sdr.result_id AS optionValue,
			tdd.column_name AS optionLabel
		FROM 
			sql_design_results sdr LEFT JOIN table_design_details tdd
		ON 
			sdr.column_id = tdd.column_id
		WHERE
			sdr.sql_design_id = ${sqlDesignId}
			
	</select>
    
    <select id="getSequencesTableDesign" resultType="Long">
		select SETVAL('tbl_design_seq'::regclass,NEXTVAL('tbl_design_seq'::regclass) + #{size})
	</select>
	
	<select id="getNameByTableId" resultType="java.lang.String">
		SELECT
			A.tbl_design_code
		FROM 
			table_design
		WHERE
			tbl_design_id = #{tableId}
		LIMIT 1		
	</select>
</mapper>
