<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.terasoluna.qp.domain.repository.functiondesign.FunctionDesignRepository">
	<resultMap id="functionDesignResultMap" type="FunctionDesign">
		<id property="functionId" column="function_id" />
		<result property="functionName" column="function_name" />
		<result property="functionCode" column="function_code" />
		<result property="functionType" column="function_type" />
		<result property="moduleId" column="module_id" />
		<result property="projectId" column="project_id" />
		<result property="moduleIdAutocomplete" column="module_name" />
		<result property="actor" column="actor" />
		<result property="remark" column="remark" />
		<result property="createdBy" column="created_by" />
        <result property="createdDate" column="created_date" />
        <result property="updatedBy" column="updated_by" />
        <result property="updatedDate" column="updated_date" />
	</resultMap>
	
	<resultMap id="businessDesignResultMap" type="BusinessDesign">
		<id property="functionDesignId" column="function_id" />
		<result property="businessLogicId" column="business_logic_id" />
		<result property="businessLogicName" column="business_logic_name" />
		<result property="businessLogicCode" column="business_logic_code" />
		<result property="businessTypeId" column="business_type_id" />
		<result property="functionDesignId" column="function_id" />
		<result property="functionDesignCode" column="function_code" />
		<result property="functionDesignName" column="function_name" />
		<result property="remark" column="remark" />
		<result property="createdBy" column="created_by" />
        <result property="createdDate" column="created_date" />
        <result property="updatedBy" column="updated_by" />
        <result property="updatedDate" column="updated_date" />
	</resultMap>
		
	<resultMap id="businessTypeResultMap" type="BusinessType">
		<id property="businessTypeId" column="business_type_id" />
		<result property="businessTypeCode" column="business_type_code" />
		<result property="businessTypeName" column="business_type_name" />
		<result property="remark" column="remark" />
		<result property="parentBusinessTypeId" column="parent_business_type_id" />
		<result property="createdBy" column="created_by" />
        <result property="createdDate" column="created_date" />
        <result property="updatedBy" column="updated_by" />
        <result property="updatedDate" column="updated_date" />
	</resultMap>
	
	<!-- Mapping for autocomplete result -->
	<resultMap id="autocompleteResultMap" type="Autocomplete">
		<result property="optionValue" column="optionValue" />
		<result property="optionLabel" column="optionLabel" />
	</resultMap>

	<!-- Count function design by search condition -->
	<select id="countBySearchCriteria" parameterType="org.terasoluna.qp.domain.repository.functiondesign.FunctionDesignRepository" resultType="_long">
		<![CDATA[
			SELECT 
				COUNT(*) 
			FROM 
				function_design a
			INNER JOIN 
				module b ON a.module_id = b.module_id
			INNER JOIN
				project c ON c.project_id = b.project_id
		]]>
		<include refid="findPageByCriteriaWherePhrase" />
	</select>

	<!-- Finds all function design by search condition -->
	<select id="findPageBySearchCriteria" parameterType="org.terasoluna.qp.domain.repository.functiondesign.FunctionDesignCriteria" resultMap="functionDesignResultMap">
		<![CDATA[
			SELECT
				function_id,
				function_code,
				function_name,
				function_type,
				a.module_id,
				module_name as module_name,
				a.remark,
				actor,
				a.updated_by,
				a.updated_date
			FROM 
				function_design a
			INNER JOIN
				module b ON a.module_id = b.module_id
			INNER JOIN
				project c ON b.project_id = c.project_id
		]]>
		<include refid="findPageByCriteriaWherePhrase" />
		<if test="pageable.sort != null">
			ORDER BY
			<foreach collection="pageable.sort" item="order" separator=",">
				${order.property} ${order.direction}
			</foreach>
		</if>
		<if test="pageable.sort == null">
			ORDER BY
				updated_date DESC
		</if>
		<![CDATA[
			 LIMIT
				 #{pageable.pageSize}
			 OFFSET
				 #{pageable.offset}
		]]>
	</select>
	
	<!-- function master search criteria -->
	<sql id="findPageByCriteriaWherePhrase">
		<where>
			<if test="criteria.functionName != null and criteria.functionName != ''">
				<bind name="functionName" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.functionName)" />
				<![CDATA[
					function_name ILIKE #{functionName} ESCAPE '~'
				]]>
			</if>
			<if test="criteria.functionCode != null and criteria.functionCode != ''">
				<bind name="functionCode" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.functionCode)" />
				<![CDATA[
					AND function_code ILIKE #{functionCode} ESCAPE '~'
				]]>
			</if>
			<if test="criteria.moduleId != null and criteria.moduleId != ''">
				<![CDATA[
					AND a.module_id = #{criteria.moduleId}
				]]>
			</if>
			<if test="criteria.functionType != null and criteria.functionType.length > 0">
				AND function_type IN			  
				<foreach item="type" index="index" collection="criteria.functionType" open="(" separator="," close=")">
					#{type}
				</foreach>
			</if>
				AND c.project_id = #{criteria.projectId}
		</where>
	</sql>

	<!--  Finds all function design auto complete by function name and module identity -->
    <select id="getAllFunctionDesignForAutocomplete" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput" resultMap="autocompleteResultMap">
        SELECT
            function_id AS optionValue,
            function_name AS optionLabel,
            function_code AS output01,
            function_type AS output02
        FROM 
            function_design
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="searchKey != null and searchKey != ''" >
                <bind name="keyword" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(searchKey)" />
                <![CDATA[ function_name ILIKE #{keyword} ESCAPE '~' ]]>
            </if>
            <if test="arg01 != null and arg01 != ''">
                <![CDATA[
                    AND module_id = CAST(#{arg01} AS numeric(16,0))
                ]]>
            </if>
           <if test="arg01 == null or arg01 == ''">
                FALSE
            </if>
            <if test="arg03 != null and arg03 != ''">
            	AND function_type = CAST(#{arg03} AS numeric(16,0))
            </if>
        </trim>
        ORDER BY 
            function_name
        <if test="arg02 != null and arg02 != ''">
			LIMIT CAST(#{arg02} AS NUMERIC)
		</if>
		<if test="arg02 == null || arg02 == ''">
			LIMIT 20
		</if>
    </select>
    
    <!--  Finds all function design auto complete by function name and module identity and functiontype -->
    <select id="getAllFunctionDesignByTypeForAutocomplete" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput" resultMap="autocompleteResultMap">
        SELECT
            function_id AS optionValue,
            function_name AS optionLabel,
            function_code AS output01,
            function_type AS output02
        FROM 
            function_design
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="searchKey != null and searchKey != ''" >
                <bind name="keyword" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(searchKey)" />
                <![CDATA[ function_name ILIKE #{keyword} ESCAPE '~' ]]>
            </if>
            <if test="arg02 != null and arg02 != ''">
                <![CDATA[
                    AND module_id = CAST(#{arg02} AS numeric(16,0))
                ]]>
            </if>
           <if test="arg02 == null or arg02 == ''">
                	AND FALSE
            </if>
            <if test="arg03 != null and arg03 != ''">
                <![CDATA[
                    AND function_type = CAST(#{arg03} AS smallint)
                ]]>
            </if>
        </trim>
        ORDER BY 
            function_name
        <if test="arg01 != null and arg01 != ''">
			LIMIT CAST(#{arg01} AS NUMERIC)
		</if>
		<if test="arg01 == null || arg01 == ''">
			LIMIT 20
		</if>
    </select>
    <!--  Finds all function design auto complete by function name and module identity and functiontype -->
    <select id="getAllFunctionDesignByModuleForAutocomplete" parameterType="org.terasoluna.qp.domain.service.common.AutocompleteInput" resultMap="autocompleteResultMap">
        SELECT
            function_id AS optionValue,
            function_name AS optionLabel,
            function_code AS output01
        FROM 
            function_design
        <where>
            <if test="searchKey != null and searchKey != ''" >
                <bind name="keyword" value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(searchKey)" />
                <![CDATA[ function_name ILIKE #{keyword} ESCAPE '~' ]]>
            </if>
            <if test="arg02 != null and arg02 != ''">
                <![CDATA[
                    AND module_id = CAST(#{arg02} AS numeric(16,0))
                ]]>
            </if>
            <if test="arg02 == null or arg02 == ''">
            	AND FALSE
            </if>
        </where>
        ORDER BY 
            function_name
        <if test="arg01 != null and arg01 != ''">
			LIMIT CAST(#{arg01} AS NUMERIC)
		</if>
		<if test="arg01 == null || arg01 == ''">
			LIMIT 20
		</if>
    </select>
	
	<select id="findAllFunctionDesignByModuleId" resultMap="functionDesignResultMap" parameterType="Long">
		SELECT
			a.function_id,
			a.function_code,
			a.function_name,
			a.function_type,
			a.module_id,
			a.remark,
			a.actor,
			a.updated_by,
			a.updated_date
		FROM 
			function_design a
		WHERE
			a.module_id = #{moduleId}
	</select>

	<select id="findAllFunctionDesignByProjectId" resultMap="functionDesignResultMap" parameterType="Long">
		SELECT
			a.function_id,
			a.function_code,
			a.function_name,
			a.function_type,
			b.module_id,
			a.remark,
			a.actor,
			a.updated_by,
			a.updated_date
		FROM 
			function_design a
		INNER JOIN
			module b ON a.module_id = b.module_id
		WHERE
			b.project_id = #{projectId}
		ORDER BY a.function_code
	</select>

	<select id="findAllBusinessDesignByProjectId" resultMap="businessDesignResultMap" parameterType="Long">
		SELECT
			a.business_logic_id,
			a.business_logic_code,
			a.business_logic_name,
			a.remark,
			b.function_id,
			b.function_code,
			b.function_name,
			c.business_type_id,
			a.created_by,
			a.created_date,
			a.updated_by,
			a.updated_date
		FROM 
			business_logic a
		INNER JOIN
			function_design b ON b.function_id = a.function_id
		INNER JOIN
			module c ON c.module_id = b.module_id
		WHERE
			a.project_id = #{projectId}
		ORDER BY 
			a.function_id,
			a.business_logic_id
	</select>
	
	<select id="findAllBusinessTypeByProjectId" resultMap="businessTypeResultMap" parameterType="Long">
		SELECT
			a.business_type_id,
			a.business_type_code,
			a.business_type_name,
			a.remark,
			a.parent_business_type_id,
			a.created_by,
			a.created_date,
			a.updated_by,
			a.updated_date
		FROM 
			business_type a
		WHERE
			a.project_id = #{projectId}
		ORDER BY 
			a.business_type_code
	</select>
	
	<insert id="register" parameterType="FunctionDesign" >
		<selectKey keyProperty="functionId" resultType="long" order="BEFORE">
			SELECT NEXTVAL('function_design_seq') AS functionId
		</selectKey>
		<![CDATA[
			INSERT INTO function_design 
			(
				function_id,
				function_name,
				function_code,
				function_type,
				actor,
				module_id,
				remark,
				created_by,
				created_date,
				updated_by,
				updated_date
			)
			VALUES
			(
				#{functionId},
				#{functionName},
				#{functionCode},
				#{functionType},
				#{actor},
				#{moduleId},
				#{remark},
				#{createdBy},
				#{createdDate},
				#{updatedBy},
				#{updatedDate}
			)
		]]>
	</insert>
	
	<select id="countNameCodeByFunctionId" resultType="Long" parameterType="FunctionDesign">
		SELECT 
			SUM(rowVal) AS totalCount
		FROM 
		(
			(
				SELECT 
					1 AS rowVal
				FROM 
					function_design f INNER JOIN module m ON m.module_id = f.module_id
				<where>
					m.project_id = #{projectId}

					<if test="functionName != null and functionName != ''">
						AND UPPER(f.function_name) = UPPER(#{functionName})
					</if>
					<if test="functionId != null">
						AND f.function_id != #{functionId}
					</if>
					<if test="functionName == null and functionName == ''">
						FALSE
					</if>
				</where>
				LIMIT 1
			)
			
			UNION
			(
				SELECT
					2 AS rowVal
				FROM 
					function_design f INNER JOIN module m ON m.module_id = f.module_id
				<where>
					m.project_id = #{projectId}

					<if test="functionCode != null and functionCode != ''">
						AND UPPER(f.function_code) = UPPER(#{functionCode})
					</if>
					<if test="functionId != null">
						AND f.function_id != #{functionId}
					</if>
					<if test="functionCode == null and functionCode == ''">
						FALSE
					</if>
				</where>
				LIMIT 1
			)
		) AS checkDuplicate
	</select>
	
	<select id="findFunctionDesignById" parameterType="Long" resultMap="functionDesignResultMap">
		SELECT
			function_id,
			function_name,
			function_code,
			function_type,
			a.module_id,
			b.module_name,
			actor,
			a.remark,
			a.updated_by,
			a.updated_date,
			b.project_id
		FROM 
			function_design a
		LEFT JOIN
			module b ON a.module_id = b.module_id 
		WHERE
			function_id = #{functionId}
	</select>
	
	<update id="modify" parameterType="FunctionDesign">
		UPDATE
			function_design
		SET 
			function_name = #{functionName},
			function_code = #{functionCode},
			function_type = #{functionType},
			actor = #{actor},
			updated_by = #{updatedBy},
			updated_date = #{sysDateTime},
			remark = #{remark}
		WHERE
			function_id = #{functionId}
		AND
			updated_date = #{updatedDate}
	</update>
	
	<delete id="delete" parameterType="FunctionDesign">
		DELETE FROM
			function_design
		WHERE
			function_id = #{functionId}
	</delete>
	
	<select id="getListUsingFD" parameterType="Long" resultType="Long">
		SELECT 
			SUM(rowCount) as totalCount
		FROM 
			(
				(SELECT 
					1 as rowCount
				FROM 
					screen_design
				WHERE
					function_id = #{functionId})
					
				UNION
				
				(SELECT 
					2 as rowCount
				FROM 
					business_logic
				WHERE
					function_id =  #{functionId})
					
				
			) as foo
	</select>
	
	<select id="getSequencesFunctionDesign" resultType="Long">
    	select SETVAL('function_design_seq'::regclass, NEXTVAL('function_design_seq'::regclass) + #{size})
    </select>
	
	<insert id="registerLstFunctionDesign" >
    	<if test="lstFunctionDesign != null and  lstFunctionDesign.size() > 0 ">
			INSERT INTO function_design 
			(
				function_id,
				function_name,
				function_code,
				function_type,
				actor,
				module_id,
				remark,
				created_by,
				created_date,
				updated_by,
				updated_date
			)
    		VALUES 
    		<foreach item="item" collection="lstFunctionDesign" separator=",">
			(
				#{item.functionId},
				#{item.functionName},
				#{item.functionCode},
				#{item.functionType},
				#{item.actor},
				#{item.moduleId},
				#{item.remark},
				#{item.createdBy},
				#{item.createdDate},
				#{item.updatedBy},
				#{item.updatedDate}
            )
			</foreach>;
		</if>
    </insert>
	
</mapper>